{
    "basePath": "/",
    "info": {
        "title": "GROWW - Documentation de l‚Äôarchitecture globale",
        "version": "1.0.0"
    },
    "swagger": "2.0",
    "host": "api.recette.groww.fr",
    "schemes": ["https"],
    "tags": [
        {
            "name": "Installation",
            "description": "<section id='contexte'>
            <h2>Contexte</h2>
            <p><strong>Groww.fr</strong> est une application d√©velopp√©e par Willemse SAS, sp√©cialis√©e dans l‚Äôaccompagnement des jardiniers, amateurs et experts, dans l‚Äôentretien de leurs plantes. 
            Elle fournit des conseils personnalis√©s, des rappels d‚Äôentretien et des recommandations adapt√©es aux saisons et aux types de v√©g√©taux.</p>
            <h3>L‚Äô√©cosyst√®me technique</h3>
            <ul>
                <li><strong>willemse-groww-app:</strong> L‚Äôapplication mobile d√©velopp√©e avec Expo (React Native), permettant aux utilisateurs de suivre leurs plantes et de recevoir des conseils.</li>
                <li><strong>Groww-api-next:</strong> L‚ÄôAPI Next.js qui alimente l‚Äôapplication en donn√©es et g√®re les interactions utilisateur.</li>
                <li><strong>Groww-algorithm:</strong> Module d√©di√© aux recommandations et √† l‚Äôintelligence derri√®re l‚Äôassistant jardinier.</li>
                <li><strong>groww-backoffice:</strong> Interface de gestion pour l‚Äôadministration des contenus et des utilisateurs.</li>
                <li><strong>Groww-scripts-next:</strong> Scripts et outils d‚Äôautomatisation pour la maintenance et le d√©ploiement des services.</li>
            </ul>
        </section>
        <section id='installation'>
            <h2>Guide d'Installation</h2>
            <h3>Pr√©requis</h3>
            <p>Avant de commencer l'installation, assurez-vous d'avoir les logiciels suivants :</p>
            <ul>
                <li>Compte Gitlab</li>
                <li>Compte Github</li>
                <li>Compte EAS (Expo Application Service)</li>
                <li>Openssl</li>
                <li>Docker Desktop</li>
                <li>Android Studio</li>
                <li>Git</li>
                <li>Putty ou Mobaxterm ou autre</li>
                <li>Mongo Compass</li>
                <li>Node, npm, npx</li>
            </ul>
            <h3>Installation de willemse-groww-app</h3>
            <h4>Configuration d'Android Studio</h4>
            <p>Dans Device Manager, ajouter un nouvel appareil.</p>
            <ol>
                <li>Cliquez sur + -> Create Virtual Device -> Choisir un appareil.</li>
                <li>S√©lectionnez l'API (API 35 VanillaIceCream utilis√©e pour les tests).</li>
                <li>Choisissez un nom pour l‚Äôappareil -> Finish.</li>
                <li>Lancez l‚Äô√©mulation.</li>
            </ol>
            <h4>Commandes √† ex√©cuter</h4>
            <pre>git clone https://github.com/Willemse-SAS/willemse-groww-app.git
cd willemse-groww-app
npm install --legacy-peer-deps
npx expo start</pre>
            <p><strong>Lancement de l'application :</strong></p>
            <ul>
                <li><strong>Android:</strong> Pressez <code>a</code> dans le terminal. Lancez Android Studio avec l‚Äô√©mulation (Smartphone utilis√© : Pixel Fold API 35).</li>
                <li><strong>Web:</strong> Pressez <code>w</code> dans le terminal. Ouvrez un navigateur et utilisez le lien fourni par Expo.</li>
            </ul>
            <h3>Installation de Groww-api-next</h3>
            <h4>Configuration SSH et GitLab</h4>
            <p>D√©marrer le service SSH-Agent dans PowerShell :</p>
            <pre>Get-Service ssh-agent | Set-Service -StartupType Automatic
Start-Service ssh-agent</pre>
            <h4>Cr√©ation et ajout de la cl√© SSH</h4>
            <pre>ssh-keygen -t rsa -b 4096 -C ton-email@example.com
ssh-add
ssh-add -l
ssh -T git@gitlab.com</pre>
            <h3>Lancement sur Docker</h3>
            <pre>docker build -t mon-app .
docker cp ~/.ssh/id_rsa node-container:/root/.ssh/id_rsa
ssh -T git@gitlab.com</pre>
            <h3>Lancement de l'application en local</h3>
            <pre>npm run dev</pre>
            <h3>Installation de Groww-algorithm</h3>
            <pre>git clone https://gitlab.com/Groww/Groww-algorithm.git
npm install --legacy-peer-deps</pre>
            <h3>Installation de groww-backoffice</h3>
            <pre>git clone https://gitlab.com/Groww/groww-backoffice.git
cd groww-backoffice
npm install --legacy-peer-deps</pre>
            <h4>Configuration de Docker</h4>
            <pre>docker-compose up ‚Äìbuild</pre>
            <h4>Cr√©ation de la base de donn√©es</h4>
            <pre>docker exec -it groww-backoffice-mariadb-1 mariadb -u root -pchangeme
CREATE DATABASE groww_backoffice;
Exit;</pre>
            <h4>Cr√©ation des tables</h4>
            <pre>docker exec -i groww-backoffice-mariadb-1 mariadb -uroot -pchangeme groww_backoffice < install/create_database.sql</pre>
            <h3>Lancement en local</h3>
            <p>Acc√©der √† l'interface via les diff√©rents ports d‚Äôacc√®s vus dans Docker Desktop (Ex: <code>http://localhost:9080/</code>).</p>
            <h3>Installation de Groww-scripts-next</h3>
            <pre>git clone https://gitlab.com/Groww/groww-script-next.git
npm install --legacy-peer-deps</pre>
            <h4>Configuration SSH et GitLab</h4>
            <pre>Get-Service ssh-agent | Set-Service -StartupType Automatic
Start-Service ssh-agent
ssh-add -l
ssh -T git@gitlab.com</pre>
            <p>Si la connexion √©choue, ajoutez la cl√© SSH dans GitLab et testez √† nouveau :</p>
            <pre>ssh -T git@gitlab.com</pre>
        </section>"
          },
          {
            "name": "Schema fonctionnel",
            "description": "<div style='height:1040px' style='display: inline-block; overflow: hidden; cursor: zoom-in;'><img src='./GR.png' alt='Pr√©visions m√©t√©orologiques' style='transform: scale(2.0); padding-left:200px; margin-top:270px' /></div>",
          },
      {
        "name": "Groww-api-next",
        "description": "API principale Groww"
      },
      {
        "name": "Groww-algorithm",
        "description": "Algorithme des taches, \"intelligence\" de groww"
      },
      {
        "name": "Groww-scripts-next",
        "description": "Drivers de groww"
      }
      ,
      {
        "name": "Groww-backoffice",
        "description": "The backoffice üëå"
      }
    ],
    "paths": {
        "/Login" : {
            "post": {
        "tags": ["Groww-backoffice"],
        "summary": "Authentification de l'utilisateur",
        "description": "Permet √† un administrateur de se connecter avec son nom d'utilisateur et son mot de passe.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "username": {
                    "type": "string",
                    "example": "admin"
                  },
                  "password": {
                    "type": "string",
                    "example": "MotDePasse123!"
                  }
                },
                "required": ["username", "password"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Connexion r√©ussie"
                    },
                    "token": {
                      "type": "string",
                      "example": "eyJhbGciOiJIUzI1NiIsInR..."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Identifiants incorrects"
          }
        }
      
    
        }
            
        },
        "/index":{
          "get": {
        "tags": ["Groww-backoffice"],
        "summary": "Page d'accueil apr√®s connexion",
        "description": "Affiche la liste des sections accessibles apr√®s connexion.",
        "responses": {
          "200": {
            "description": "Liste des sections du tableau de bord"
          },
          "401": {
            "description": "Utilisateur non authentifi√©"
          }
        }
      }
    },
    "/actionsback": {
      "post": {
        "tags": ["Groww-backoffice"],
        "operationId": "<h2>Cr√©er une nouvelle action</h2><p>Cette route permet de cr√©er une nouvelle action en fournissant les informations n√©cessaires via une requ√™te POST.</p>",
        "summary": "Cr√©er une nouvelle action",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Action"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Action cr√©√©e avec succ√®s"
          },
          "400": {
            "description": "Requ√™te invalide"
          }
        }
      }
    },
    "/actionsback/{id}": {
      "put": {
        "tags": ["Groww-backoffice"],
        "operationId": "<h2>Modifier une action existante</h2><p>Cette route permet de modifier une action existante en envoyant les nouvelles valeurs via une requ√™te PUT.</p>",
        "summary": "Modifier une action existante",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Action"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Action modifi√©e avec succ√®s"
          },
          "400": {
            "description": "Requ√™te invalide"
          },
          "404": {
            "description": "Action non trouv√©e"
          }
        }
      }
    },
    "/administrators": {
      "post": {
        "tags": ["Groww-backoffice"],
        "summary": "Cr√©er un administrateur",
        "description": "Cr√©e un nouvel administrateur en d√©finissant le nom d'utilisateur et le mot de passe (avec confirmation).",
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "username",
            "in": "formData",
            "description": "Nom d'utilisateur de l'administrateur",
            "required": true,
            "type": "string"
          },
          {
            "name": "password",
            "in": "formData",
            "description": "Mot de passe de l'administrateur",
            "required": true,
            "type": "string"
          },
          {
            "name": "confirm",
            "in": "formData",
            "description": "Confirmation du mot de passe",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Administrateur cr√©√© avec succ√®s."
          },
          "400": {
            "description": "Erreur: le mot de passe et la confirmation ne correspondent pas."
          }
        }
      }
    },
    "/administrators/{id}": {
      "put": {
        "tags": ["Groww-backoffice"],
        "summary": "Modifier un administrateur",
        "description": "Modifie le nom d'utilisateur d'un administrateur existant.",
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID de l'administrateur √† modifier",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "username",
            "in": "formData",
            "description": "Nouveau nom d'utilisateur",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Administrateur mis √† jour avec succ√®s."
          },
          "404": {
            "description": "Administrateur non trouv√©."
          }
        }
      },
      "delete": {
        "tags": ["Groww-backoffice"],
        "summary": "Supprimer un administrateur",
        "description": "Supprime un administrateur existant. L'administrateur connect√© ne peut pas se supprimer lui-m√™me.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID de l'administrateur √† supprimer",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "Administrateur supprim√© avec succ√®s."
          },
          "400": {
            "description": "Erreur: vous ne pouvez pas vous supprimer vous-m√™me."
          },
          "404": {
            "description": "Administrateur non trouv√©."
          }
        }
      }
    },
    "/badges": {
      "post": {
        "tags": ["Groww-backoffice"],
        "summary": "Cr√©er un badge",
        "description": "Cr√©e un nouveau badge avec une image",
        "operationId": "createBadge",
        "parameters": [
          {
            "name": "picture",
            "in": "formData",
            "description": "Image associ√©e au badge",
            "required": true,
            "type": "string",
            "format": "binary"
          }
        ],
        "responses": {
          "201": {
            "description": "Badge cr√©√© avec succ√®s"
          },
          "400": {
            "description": "Requ√™te incorrecte"
          }
        }
      }
    },
    "/badges/{id}": {
      "put": {
        "tags": ["Groww-backoffice"],
        "summary": "Modifier un badge",
        "description": "Met √† jour un badge existant avec une nouvelle image",
        "operationId": "editBadge",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID du badge √† mettre √† jour",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "picture",
            "in": "formData",
            "description": "Nouvelle image pour le badge",
            "required": true,
            "type": "string",
            "format": "binary"
          }
        ],
        "responses": {
          "200": {
            "description": "Badge mis √† jour avec succ√®s"
          },
          "400": {
            "description": "Requ√™te incorrecte"
          },
          "404": {
            "description": "Badge non trouv√©"
          }
        }
      }
    },
    "/categorie": {
      "post": {
        "tags": ["Groww-backoffice"],
        "summary": "Cr√©er une nouvelle cat√©gorie",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "picture": { "type": "string" },
                "background_color": { "type": "string" },
                "order": { "type": "integer" },
                "visible": { "type": "boolean" }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Cat√©gorie cr√©√©e avec succ√®s"
          }
        }
      }
    },
    "/categorie/{id}": {
      "put": {
        "tags": ["Groww-backoffice"],
        "summary": "Modifier une cat√©gorie existante",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "picture": { "type": "string" },
                "background_color": { "type": "string" },
                "order": { "type": "integer" },
                "visible": { "type": "boolean" }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Cat√©gorie mise √† jour avec succ√®s"
          }
        }
      }
    },
    "/conditions": {
      "post": {
        "tags": [
          "Groww-backoffice"
        ],
        "summary": "Cr√©er une nouvelle condition",
        "description": "Cr√©e une condition en utilisant le param√®tre 'type'.",
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "type",
            "in": "formData",
            "description": "Le type de la condition",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Condition cr√©√©e avec succ√®s"
          },
          "400": {
            "description": "Erreur dans les donn√©es envoy√©es"
          }
        }
      }
    },
    "/conditions/{id}": {
      "put": {
        "tags": [
          "Groww-backoffice"
        ],
        "summary": "Modifier une condition existante",
        "description": "Modifie une condition identifi√©e par son id et met √† jour le param√®tre 'type'.",
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Identifiant de la condition √† modifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "type",
            "in": "formData",
            "description": "Le nouveau type de la condition",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Condition modifi√©e avec succ√®s"
          },
          "400": {
            "description": "Erreur dans les donn√©es envoy√©es"
          },
          "404": {
            "description": "Condition non trouv√©e"
          }
        }
      }
    },
    "/life_cycles": {
      "get": {
        "tags": [
          "Groww-backoffice"
        ],
        "summary": "Liste des cycles de vie",
        "operationId": "getLifeCycles",
        "responses": {
          "200": {
            "description": "Liste des cycles de vie r√©cup√©r√©e avec succ√®s"
          }
        }
      },
      "post": {
        "tags": [
          "Groww-backoffice"
        ],
        "summary": "Cr√©er un nouveau cycle de vie",
        "operationId": "createLifeCycle",
        "responses": {
          "201": {
            "description": "Cycle de vie cr√©√© avec succ√®s"
          }
        }
      }
    },
    "/life_cycles/{id}": {
      "get": {
        "tags": [
          "Groww-backoffice"
        ],
        "summary": "Obtenir un cycle de vie par son ID",
        "operationId": "getLifeCycleById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID du cycle de vie",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "D√©tails du cycle de vie r√©cup√©r√© avec succ√®s"
          },
          "404": {
            "description": "Cycle de vie non trouv√©"
          }
        }
      },
      "put": {
        "tags": [
          "Groww-backoffice"
        ],
        "summary": "Mettre √† jour un cycle de vie existant",
        "operationId": "updateLifeCycle",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID du cycle de vie √† mettre √† jour",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Cycle de vie mis √† jour avec succ√®s"
          },
          "404": {
            "description": "Cycle de vie non trouv√©"
          }
        }
      },
      "delete": {
        "tags": [
          "Groww-backoffice"
        ],
        "summary": "Supprimer un cycle de vie",
        "operationId": "deleteLifeCycle",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID du cycle de vie √† supprimer",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "204": {
            "description": "Cycle de vie supprim√© avec succ√®s"
          },
          "404": {
            "description": "Cycle de vie non trouv√©"
          }
        }
      }
    },
    "/plants/create": {
      "get": {
        "tags": [
          "Groww-backoffice"
        ],
        "summary": "Affiche le formulaire de cr√©ation d'une plante",
        "parameters": [
          {
            "name": "parent",
            "in": "query",
            "description": "Identifiant du parent (optionnel)",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Formulaire de cr√©ation de plante"
          }
        }
      }
    },
    "/plants/edit/{id}": {
      "get": {
        "tags": [
          "Groww-backoffice"
        ],
        "summary": "Affiche le formulaire d'√©dition d'une plante",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Identifiant de la plante √† √©diter",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Formulaire d'√©dition de plante"
          }
        }
      }
    },
    "/plants/delete": {
      "post": {
        "tags": [
          "Groww-backoffice"
        ],
        "summary": "Supprime une association de plante",
        "parameters": [
          {
            "name": "id",
            "in": "formData",
            "description": "Identifiant de l'association √† supprimer",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Association supprim√©e"
          }
        }
      }
    },
    "/plants/add/{id}": {
      "post": {
        "tags": [
          "Groww-backoffice"
        ],
        "summary": "Ajoute une association √† une plante",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Identifiant de la plante",
            "required": true,
            "type": "string"
          },
          {
            "name": "refs",
            "in": "formData",
            "description": "Liste des r√©f√©rences √† associer",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Association ajout√©e"
          }
        }
      }
    },
    "/plants/willemse/{id}": {
      "get": {
        "tags": [
          "Groww-backoffice"
        ],
        "summary": "Affiche les associations willemse d'une plante",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Identifiant de la plante",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Donn√©es des associations willemse"
          }
        }
      }
    },
    "/plants/association/{id}": {
      "get": {
        "tags": [
          "Groww-backoffice"
        ],
        "summary": "Affiche les associations d'une plante",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Identifiant de la plante",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "D√©tails des associations de la plante"
          }
        }
      }
    },
    "/plants/variety": {
      "post": {
        "tags": [
          "Groww-backoffice"
        ],
        "summary": "Cr√©e une vari√©t√© de plante",
        "parameters": [
          {
            "name": "parent",
            "in": "formData",
            "description": "Identifiant de la plante parente",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Vari√©t√© cr√©√©e avec succ√®s"
          }
        }
      }
    },
    "/plants/view/{id}": {
      "get": {
        "tags": [
          "Groww-backoffice"
        ],
        "summary": "Affiche le d√©tail d'une plante",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Identifiant de la plante",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "D√©tails de la plante"
          }
        }
      }
    },
    "/partners": {
      "post": {
        "tags": [
          "Groww-backoffice"
        ],
        "summary": "Cr√©er un partenaire",
        "requestBody": {
          "required": true,
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Nom du partenaire"
                  },
                  "visible": {
                    "type": "boolean",
                    "description": "Indique si le partenaire est visible"
                  }
                },
                "required": [
                  "name",
                  "visible"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Partenaire cr√©√©"
          }
        }
      }
    },
    "/partners/{id}": {
      "put": {
        "tags": [
          "Groww-backoffice"
        ],
        "summary": "Modifier un partenaire",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID du partenaire",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Nom du partenaire"
                  },
                  "visible": {
                    "type": "boolean",
                    "description": "Statut de visibilit√©"
                  },
                  "coupons": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "Liste des coupons associ√©s"
                  }
                },
                "required": [
                  "name",
                  "visible",
                  "coupons"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Partenaire modifi√©"
          }
        }
      }
    },
    "/rule_alerts/list": {
      "get": {
        "tags": [
          "Groww-backoffice"
        ],
        "summary": "Liste des alertes de r√®gles",
        "description": "Retourne une liste pagin√©e des alertes de r√®gles.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Num√©ro de la page",
            "required": false,
            "type": "integer",
            "default": 1
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Nombre maximum d'enregistrements par page",
            "required": false,
            "type": "integer",
            "default": 100
          },
          {
            "name": "search",
            "in": "query",
            "description": "Terme de recherche pour filtrer les alertes de r√®gles",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Op√©ration r√©ussie"
          }
        }
      }
    },
    "/rule_alerts/process": {
      "get": {
        "tags": [
          "Groww-backoffice"
        ],
        "summary": "Traiter les alertes de r√®gles",
        "description": "Supprime les alertes fix√©es et non exceptionnelles, puis re-traite les r√®gles sur les plants.",
        "responses": {
          "200": {
            "description": "Op√©ration r√©ussie et redirection"
          }
        }
      }
    },
    "/rule_alerts/fixed": {
      "post": {
        "tags": [
          "Groww-backoffice"
        ],
        "summary": "Basculer l'√©tat 'Fixed'",
        "description": "Bascule l'√©tat 'fixed' pour une alerte de r√®gle donn√©e bas√©e sur l'identifiant de la r√®gle et du plant.",
        "parameters": [
          {
            "name": "rule",
            "in": "formData",
            "description": "Identifiant de la r√®gle",
            "required": true,
            "type": "string"
          },
          {
            "name": "id_plant",
            "in": "formData",
            "description": "Identifiant du plant",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "√âtat 'fixed' bascul√© et redirection de l'utilisateur"
          }
        }
      }
    },
    "/rule_alerts/exception": {
      "post": {
        "tags": [
          "Groww-backoffice"
        ],
        "summary": "Basculer l'√©tat 'Exception'",
        "description": "Bascule l'√©tat 'exception' pour une alerte de r√®gle donn√©e bas√©e sur l'identifiant de la r√®gle et du plant.",
        "parameters": [
          {
            "name": "rule",
            "in": "formData",
            "description": "Identifiant de la r√®gle",
            "required": true,
            "type": "string"
          },
          {
            "name": "id_plant",
            "in": "formData",
            "description": "Identifiant du plant",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "√âtat 'exception' bascul√© et redirection de l'utilisateur"
          }
        }
      }
    },
    "/rule_alerts/delete": {
      "post": {
        "tags": [
          "Groww-backoffice"
        ],
        "summary": "Supprimer une alerte de r√®gle",
        "description": "Supprime une alerte de r√®gle sp√©cifique bas√©e sur l'identifiant de la r√®gle et du plant.",
        "parameters": [
          {
            "name": "rule",
            "in": "formData",
            "description": "Identifiant de la r√®gle",
            "required": true,
            "type": "string"
          },
          {
            "name": "id_plant",
            "in": "formData",
            "description": "Identifiant du plant",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Alerte de r√®gle supprim√©e et redirection de l'utilisateur"
          }
        }
      }
    },
    "/rule_alerts/index": {
      "get": {
        "tags": [
          "Groww-backoffice"
        ],
        "summary": "Action d'index",
        "description": "Redirige vers la liste des alertes de r√®gles.",
        "responses": {
          "302": {
            "description": "Redirection vers /rule_alerts/list/"
          }
        }
      }
    },
    "/seasons": {
      "post": {
        "tags": [
          "Groww-backoffice"
        ],
        "summary": "Cr√©er une nouvelle saison",
        "description": "Cr√©e une nouvelle saison avec les informations fournies",
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "field",
            "in": "formData",
            "description": "Champ associ√© √† la saison",
            "required": false,
            "type": "string"
          },
          {
            "name": "picture",
            "in": "formData",
            "description": "Image de la saison",
            "required": false,
            "type": "string"
          },
          {
            "name": "background_color",
            "in": "formData",
            "description": "Couleur de fond (sera ignor√©e si √©gale √† '#000000')",
            "required": false,
            "type": "string"
          },
          {
            "name": "order",
            "in": "formData",
            "description": "Ordre de la saison",
            "required": false,
            "type": "integer"
          },
          {
            "name": "visible",
            "in": "formData",
            "description": "Indique si la saison est visible",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Saison cr√©√©e avec succ√®s"
          },
          "default": {
            "description": "Erreur lors de la cr√©ation de la saison"
          }
        }
      }
    },
    "/seasons/{id}": {
      "put": {
        "tags": [
          "Groww-backoffice"
        ],
        "summary": "Modifier une saison existante",
        "description": "Modifie la saison sp√©cifi√©e par son identifiant",
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Identifiant de la saison",
            "required": true,
            "type": "string"
          },
          {
            "name": "field",
            "in": "formData",
            "description": "Champ associ√© √† la saison",
            "required": false,
            "type": "string"
          },
          {
            "name": "picture",
            "in": "formData",
            "description": "Image de la saison",
            "required": false,
            "type": "string"
          },
          {
            "name": "background_color",
            "in": "formData",
            "description": "Couleur de fond (sera ignor√©e si √©gale √† '#000000')",
            "required": false,
            "type": "string"
          },
          {
            "name": "order",
            "in": "formData",
            "description": "Ordre de la saison",
            "required": false,
            "type": "integer"
          },
          {
            "name": "visible",
            "in": "formData",
            "description": "Indique si la saison est visible",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Saison modifi√©e avec succ√®s"
          },
          "default": {
            "description": "Erreur lors de la modification de la saison"
          }
        }
      }
    },
    "/translation/save": {
      "post": {
        "tags": [
          "Groww-backoffice"
        ],
        "summary": "Sauvegarder une traduction.",
        "requestBody": {
          "required": true,
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "id_tk": {
                    "type": "string"
                  },
                  "locale": {
                    "type": "string"
                  },
                  "translation": {
                    "type": "string"
                  }
                },
                "required": [
                  "id_tk",
                  "locale"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Traduction sauvegard√©e avec succ√®s."
          }
        }
      }
    },
    "/translation/verify": {
      "post": {
        "tags": [
          "Groww-backoffice"
        ],
        "summary": "V√©rifier une traduction.",
        "requestBody": {
          "required": true,
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "id_tk": {
                    "type": "string"
                  },
                  "locale": {
                    "type": "string"
                  },
                  "verified": {
                    "type": "string",
                    "enum": [
                      "0",
                      "1"
                    ]
                  }
                },
                "required": [
                  "id_tk",
                  "locale",
                  "verified"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "√âtat de v√©rification mis √† jour avec succ√®s."
          }
        }
      }
    },
    "/translation/list": {
      "get": {
        "tags": [
          "Groww-backoffice"
        ],
        "summary": "Lister les traductions.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "description": "Num√©ro de page (d√©faut: 1)"
          },
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 500
            },
            "description": "Nombre d'√©l√©ments par page (d√©faut: 500)"
          },
          {
            "name": "search",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Terme de recherche"
          },
          {
            "name": "verified",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "true",
                "false"
              ]
            },
            "description": "Filtrer par v√©rification (true/false)"
          }
        ],
        "responses": {
          "200": {
            "description": "Liste des traductions r√©cup√©r√©e avec succ√®s."
          }
        }
      }
    },
    "/translation": {
      "get": {
        "tags": [
          "Groww-backoffice"
        ],
        "summary": "Redirection vers la liste des traductions.",
        "responses": {
          "302": {
            "description": "Redirection vers /translation/list"
          }
        }
      }
    },
    "/administrator": {
      "post": {
        "tags": ["Groww-backoffice"],
        "summary": "Create a new administrator",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "username": { "type": "string" },
                "password": { "type": "string" },
                "confirm": { "type": "string" }
              },
              "required": ["username", "password", "confirm"]
            }
          }
        ],
        "responses": {
          "200": { "description": "Administrator created successfully" },
          "400": { "description": "Password and Confirm don't match" }
        }
      }
    },
    "/administrator/{id}": {
      "put": {
        "tags": ["Groww-backoffice"],
        "summary": "Edit an administrator",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "username": { "type": "string" }
              },
              "required": ["username"]
            }
          }
        ],
        "responses": {
          "200": { "description": "Administrator updated successfully" }
        }
      },
      "delete": {
        "tags": ["Groww-backoffice"],
        "summary": "Delete an administrator",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": { "description": "Administrator deleted successfully" },
          "400": { "description": "Can't delete yourself!" }
        }
      }
    },
    "/localized/list": {
      "get": {
        "tags": ["Groww-backoffice"],
        "summary": "Lister les √©l√©ments avec pagination et recherche",
        "parameters": [
          {"name": "page", "in": "query", "schema": {"type": "integer", "default": 1}},
          {"name": "limit", "in": "query", "schema": {"type": "integer", "default": 100}},
          {"name": "search", "in": "query", "schema": {"type": "string"}}
        ],
        "responses": {
          "200": {"description": "R√©ponse r√©ussie"}
        }
      }
    },
    "/localized/create": {
      "post": {
        "tags": ["Groww-backoffice"],
        "summary": "Cr√©er un nouvel √©l√©ment",
        "responses": {
          "201": {"description": "√âl√©ment cr√©√© avec succ√®s"},
          "400": {"description": "Requ√™te invalide"}
        }
      }
    },
    "/localized/edit/{id}": {
      "post": {
        "tags": ["Groww-backoffice"],
        "summary": "Modifier un √©l√©ment existant",
        "parameters": [{"name": "id", "in": "path", "required": true, "schema": {"type": "integer"}}],
        "responses": {
          "200": {"description": "√âl√©ment mis √† jour avec succ√®s"},
          "404": {"description": "√âl√©ment non trouv√©"}
        }
      }
    },
    "/localized/translate/{id}": {
      "post": {
        "tags": ["Groww-backoffice"],
        "summary": "Traduire un √©l√©ment",
        "parameters": [{"name": "id", "in": "path", "required": true, "schema": {"type": "integer"}}],
        "responses": {
          "200": {"description": "Traduction enregistr√©e avec succ√®s"},
          "404": {"description": "√âl√©ment non trouv√©"}
        }
      }
    },
    "/localized/visible/{id}": {
      "post": {
        "tags": ["Groww-backoffice"],
        "summary": "D√©finir la visibilit√© d'un √©l√©ment",
        "parameters": [{"name": "id", "in": "path", "required": true, "schema": {"type": "integer"}}],
        "responses": {
          "200": {"description": "Visibilit√© mise √† jour avec succ√®s"},
          "404": {"description": "√âl√©ment non trouv√©"}
        }
      }
    },
    "/localized/delete/{id}": {
      "post": {
        "tags": ["Groww-backoffice"],
        "summary": "Supprimer un √©l√©ment",
        "parameters": [{"name": "id", "in": "path", "required": true, "schema": {"type": "integer"}}],
        "responses": {
          "200": {"description": "√âl√©ment supprim√© avec succ√®s"},
          "404": {"description": "√âl√©ment non trouv√©"}
        }
      }
    },
    "/localized/view/{id}": {
      "get": {
        "tags": ["Groww-backoffice"],
        "summary": "Afficher un √©l√©ment",
        "parameters": [{"name": "id", "in": "path", "required": true, "schema": {"type": "integer"}}],
        "responses": {
          "200": {"description": "D√©tails de l'√©l√©ment"},
          "404": {"description": "√âl√©ment non trouv√©"}
        }
      }
    },
    "/localized/index": {
      "get": {
        "tags": ["Groww-backoffice"],
        "summary": "Rediriger vers la liste",
        "responses": {
          "302": {"description": "Redirection vers /localized/list"}
        }
      }
    },
    "/belongToPlant/list/{id_plant}": {
      "get": {
        "tags": ["Groww-backoffice"],
        "summary": "Lister les √©l√©ments appartenant √† une plante",
        "parameters": [
          {"name": "id_plant", "in": "path", "required": true, "schema": {"type": "integer"}},
          {"name": "page", "in": "query", "schema": {"type": "integer", "default": 1}},
          {"name": "limit", "in": "query", "schema": {"type": "integer", "default": 100}},
          {"name": "search", "in": "query", "schema": {"type": "string"}}
        ],
        "responses": {
          "200": {"description": "R√©ponse r√©ussie"}
        }
      }
    },
    "/belongToPlant/create/{id_plant}": {
      "post": {
        "tags": ["Groww-backoffice"],
        "summary": "Cr√©er un nouvel √©l√©ment pour une plante",
        "parameters": [
          {"name": "id_plant", "in": "path", "required": true, "schema": {"type": "integer"}}
        ],
        "responses": {
          "201": {"description": "√âl√©ment cr√©√© avec succ√®s"}
        }
      }
    },
    "/belongToPlant/edit/{id_plant}/{id}": {
      "post": {
        "tags": ["Groww-backoffice"],
        "summary": "Modifier un √©l√©ment",
        "parameters": [
          {"name": "id_plant", "in": "path", "required": true, "schema": {"type": "integer"}},
          {"name": "id", "in": "path", "required": true, "schema": {"type": "integer"}}
        ],
        "responses": {
          "200": {"description": "√âl√©ment mis √† jour avec succ√®s"}
        }
      }
    },
    "/belongToPlant/delete/{id_plant}/{id}": {
      "post": {
        "tags": ["Groww-backoffice"],
        "summary": "Supprimer un √©l√©ment",
        "parameters": [
          {"name": "id_plant", "in": "path", "required": true, "schema": {"type": "integer"}},
          {"name": "id", "in": "path", "required": true, "schema": {"type": "integer"}}
        ],
        "responses": {
          "200": {"description": "√âl√©ment supprim√© avec succ√®s"}
        }
      }
    },
    "/belongToPlant/view/{id_plant}/{id}": {
      "get": {
        "tags": ["Groww-backoffice"],
        "summary": "Afficher un √©l√©ment",
        "parameters": [
          {"name": "id_plant", "in": "path", "required": true, "schema": {"type": "integer"}},
          {"name": "id", "in": "path", "required": true, "schema": {"type": "integer"}}
        ],
        "responses": {
          "200": {"description": "R√©ponse r√©ussie"}
        }
      }
    },
      "Badges" : {
        
      },
      "Categories" : {
        
      },
      "Todos" : {
        
      },
      "Cycles de vie" : {
        
      },
      "Plantes" : {
        
      },
      "Partenaire" : {
        
      },
      "Alertes" : {
        
      },
      "Saisons" : {
        
      },
      "Traductions" : {
        
      },
      "Administrateur" : {
        
      },
        "extract-weather / index":{
            "get": {
    "tags": ["Groww-scripts-next"],
    "summary": "extract-weather / index",
    "description": "<p>Cette API est responsable de l'extraction et du traitement des donn√©es m√©t√©orologiques pour les villes des utilisateurs. Elle interroge l'API OpenWeather pour obtenir les pr√©visions et les conditions m√©t√©orologiques actuelles et les stocke dans Elasticsearch pour un acc√®s ult√©rieur. L'API calcule √©galement l'√©vapotranspiration potentielle (ETP) bas√©e sur les conditions m√©t√©orologiques et les donn√©es historiques pour ajuster les stocks d'eau.</p>\n
    <h3>Exemples d'utilisation :</h3>\n
    <pre><code class=\"language-javascript\">const user = { id: 1, cityId: \"city_id\" };\n\nextractWeatherData(user, retryCount);</code></pre>\n\n
    <h3>Explication des processus internes :</h3>\n
    <p>Voici un aper√ßu d√©taill√© du processus de traitement des donn√©es m√©t√©orologiques :</p>\n
    <ul>\n
      <li><strong>R√©cup√©ration des utilisateurs :</strong> L'API r√©cup√®re tous les utilisateurs ayant une ville d√©finie et collecte les informations n√©cessaires √† partir de la base de donn√©es.</li>\n
      <li><strong>Extraction des donn√©es m√©t√©orologiques :</strong> Les donn√©es m√©t√©orologiques actuelles et les pr√©visions sont extraites via l'API OpenWeather en utilisant les coordonn√©es des villes des utilisateurs.</li>\n
      <li><strong>Calcul de l'ETP :</strong> L'API calcule l'√©vapotranspiration potentielle (ETP) bas√©e sur les temp√©ratures moyennes et les conditions m√©t√©orologiques des mois pr√©c√©dents pour chaque ville, ce qui permet d'ajuster le niveau de stock d'eau pour les cultures locales.</li>\n
      <li><strong>Stockage des donn√©es dans Elasticsearch :</strong> Les donn√©es extraites et calcul√©es sont ensuite stock√©es dans Elasticsearch pour permettre une analyse et une consultation rapide des informations.</li>\n
    </ul>\n
    <h3>Retour des notifications :</h3>\n
    <ul>\n
      <li><strong>200 OK :</strong> Les donn√©es ont √©t√© extraites et stock√©es avec succ√®s dans Elasticsearch. Cela signifie que les informations m√©t√©orologiques et les calculs associ√©s ont √©t√© correctement trait√©s.</li>\n
      <li><strong>400 Bad Request :</strong> Cela se produit lorsque des informations n√©cessaires sont manquantes ou mal format√©es. Par exemple, si l'ID de la ville est incorrect ou si l'API cl√© OpenWeather est invalide.</li>\n
      <li><strong>404 Not Found :</strong> Aucun utilisateur ou aucune ville n'a √©t√© trouv√©e pour les crit√®res sp√©cifi√©s. Cela pourrait se produire si l'utilisateur n'a pas de ville d√©finie dans la base de donn√©es.</li>\n
    </ul>\n
    <h3>Exemples de r√©ponses :</h3>\n
    <pre><code class=\"language-json\">{\n  \"status\": \"success\",\n  \"message\": \"Donn√©es m√©t√©orologiques extraites et stock√©es avec succ√®s.\"\n}</code></pre>\n
    <h3>Notes importantes :</h3>\n
    <ul>\n
      <li><strong>Pr√©cisions m√©t√©orologiques :</strong> Les notifications et calculs sont fortement influenc√©s par l'exactitude des donn√©es m√©t√©orologiques. Assurez-vous que les donn√©es obtenues depuis OpenWeather sont correctes et √† jour.</li>\n
      <li><strong>Gestion du stock d'eau :</strong> Le calcul de l'√©vapotranspiration (ETP) est utilis√© pour ajuster dynamiquement le stock d'eau pour chaque ville en fonction des pr√©visions m√©t√©o et des conditions pass√©es.</li>\n
      <li><strong>Personnalisation des donn√©es :</strong> Les donn√©es m√©t√©orologiques sont r√©cup√©r√©es et stock√©es en fonction des villes des utilisateurs, assurant que chaque utilisateur ait des informations adapt√©es √† sa localisation.</li>\n
    </ul>\n
    <h3>Code source :</h3>\n
    <pre><code class=\"language-javascript\">// Fonction pour extraire les donn√©es m√©t√©orologiques et les traiter\nasync function extractWeatherData(user, retryCount) {\n  // Logique pour extraire et traiter les donn√©es m√©t√©orologiques\n  // Utilisation de l'API OpenWeather, calcul de l'ETP, et stockage dans Elasticsearch\n}\n</code></pre>\n
    <h4>Champs de l'objet de la r√©ponse :</h4>\n
    <ul>\n
      <li><code>status</code> (String) : Le statut de l'op√©ration. Par exemple, \"success\" indique que les donn√©es ont √©t√© extraites et stock√©es avec succ√®s.</li>\n
      <li><code>message</code> (String) : Un message d'accompagnement expliquant le r√©sultat de l'op√©ration, comme \"Donn√©es m√©t√©orologiques extraites et stock√©es avec succ√®s.\"</li>\n
    </ul>\n
    <h4>Exemple de r√©ponse JSON :</h4>\n
    <pre><code class=\"language-json\">{\n  \"status\": \"success\",\n  \"message\": \"Donn√©es m√©t√©orologiques extraites et stock√©es avec succ√®s.\"\n}</code></pre>"
    ,"responses": {}}},
        "notifications-tasks / index" : {"get":{
            "tags": ["Groww-scripts-next"],
            "summary": "notifications-tasks / index",
            "description": "<p>Cette API est responsable de la g√©n√©ration et de l'envoi de notifications pour les t√¢ches relatives aux plantes des utilisateurs. Elle se base sur les actions planifi√©es, les √©v√©nements pass√©s, et les conditions m√©t√©orologiques actuelles pour d√©terminer si l'utilisateur doit √™tre notifi√©. L'algorithme <strong>Groww</strong> est utilis√© pour filtrer les t√¢ches pertinentes, et celles-ci sont envoy√©es via des notifications push en utilisant le service Expo.</p>\n
    <h3>Exemples d'utilisation :</h3>\n
    <pre><code class=\"language-javascript\">const user = { id: 1, locale: \"fr\", notifications: { accepted: true, token: \"ExpoPushToken[xxx]\" }, cityId: \"city_id\" };\n\nsendNotifications(user, tasks, actions, plants, events, weather);</code></pre>\n\n
    <h3>Explication des processus internes :</h3>\n
    <p>Voici un aper√ßu d√©taill√© du processus de g√©n√©ration des notifications :</p>\n
    <ul>\n
      <li><strong>R√©cup√©ration des utilisateurs :</strong> L'API r√©cup√®re tous les utilisateurs qui ont accept√© de recevoir des notifications. Ces utilisateurs doivent √©galement avoir une ville d√©finie.</li>\n
      <li><strong>R√©cup√©ration des donn√©es pertinentes :</strong> Pour chaque utilisateur, les plantes et actions qui lui sont associ√©es sont r√©cup√©r√©es depuis la base de donn√©es. De plus, les donn√©es m√©t√©orologiques actuelles pour la ville de l'utilisateur sont r√©cup√©r√©es via une requ√™te Elasticsearch.</li>\n
      <li><strong>G√©n√©ration des t√¢ches :</strong> L'algorithme <em>Groww</em> prend en compte les plantes, les actions, les √©v√©nements pass√©s, et la m√©t√©o pour g√©n√©rer des t√¢ches pertinentes pour chaque utilisateur. Les t√¢ches g√©n√©r√©es sont filtr√©es et prioris√©es pour assurer que l'utilisateur re√ßoive uniquement des notifications sur des t√¢ches importantes.</li>\n
      <li><strong>Envoi des notifications :</strong> Si des t√¢ches pertinentes sont g√©n√©r√©es, des notifications sont cr√©√©es pour chaque utilisateur. Les notifications sont envoy√©es via Expo √† l'aide de tokens de push pr√©alablement enregistr√©s pour chaque utilisateur.</li>\n
    </ul>\n
    <h3>Retour des notifications :</h3>\n
    <ul>\n
      <li><strong>200 OK :</strong> Les notifications ont √©t√© envoy√©es avec succ√®s. Cela signifie que les t√¢ches pertinentes ont √©t√© g√©n√©r√©es et que les notifications ont √©t√© transmises aux utilisateurs.</li>\n
      <li><strong>400 Bad Request :</strong> Cela se produit lorsque des informations n√©cessaires sont manquantes ou mal format√©es. Par exemple, si le token de notification de l'utilisateur est invalide ou si l'utilisateur n'a pas accept√© de recevoir des notifications.</li>\n
      <li><strong>404 Not Found :</strong> Aucun utilisateur ou aucune t√¢che n'a √©t√© trouv√©e pour les crit√®res sp√©cifi√©s. Cela pourrait √™tre le cas si l'utilisateur n'a pas de ville d√©finie ou si aucune t√¢che n'est associ√©e √† ses actions et √©v√©nements.</li>\n
    </ul>\n
    <h3>Notes importantes :</h3>\n
    <ul>\n
      <li><strong>Conditions m√©t√©orologiques :</strong> Les notifications peuvent √™tre affect√©es par l'exactitude des donn√©es m√©t√©orologiques. Il est essentiel que les donn√©es m√©t√©orologiques soient actualis√©es pour garantir que les t√¢ches sont pertinentes pour les conditions actuelles.</li>\n
      <li><strong>Tokens de notification :</strong> Chaque utilisateur doit avoir un token valide pour que les notifications push soient envoy√©es. Si un token est obsol√®te ou invalide, la notification ne pourra pas √™tre re√ßue.</li>\n
      <li><strong>Filtrage des t√¢ches :</strong> L'algorithme <em>Groww</em> filtre les t√¢ches en fonction de la pertinence et de l'√©tat des pr√©-conditions et post-conditions. Seules les t√¢ches valides et urgentes sont envoy√©es en notification.</li>\n
      <li><strong>Personnalisation des notifications :</strong> Les notifications sont personnalis√©es selon la langue de l'utilisateur. Si l'utilisateur a s√©lectionn√© le fran√ßais, les messages seront envoy√©s en fran√ßais. Sinon, les notifications seront envoy√©es en anglais.</li>\n
    </ul>\n
    <h4>Champs de l'objet de notification :</h4>\n
    <ul>\n
      <li><code>to</code> (String) : Le token de notification de l'utilisateur (ExpoPushToken). Ce token est unique pour chaque utilisateur et permet d'identifier o√π envoyer la notification.</li>\n
      <li><code>title</code> (String) : Le titre de la notification. Il r√©sume l'objet de la notification, par exemple \"T√¢che de soins pour votre plante\".</li>\n
      <li><code>body</code> (String) : Le contenu de la notification. Il contient une description de la t√¢che √† accomplir, ainsi que le nombre de t√¢ches restantes si applicable.</li>\n
      <li><code>badge</code> (String) : Le badge indiquant le nombre de t√¢ches en attente. Ce chiffre peut aider l'utilisateur √† voir rapidement combien de t√¢ches doivent encore √™tre effectu√©es.</li>\n
    </ul>\n
    <h4>Exemple de r√©ponse JSON :</h4>\n
    <pre><code class=\"language-json\">{\n  \"tasks\": [\n    {\"task_id\": 1, \"name\": \"Arroser la plante\", \"cycle_rank\": 1, \"due_date\": \"2025-03-16\", \"status\": \"pending\"},\n    {\"task_id\": 2, \"name\": \"V√©rifier la temp√©rature ext√©rieure\", \"cycle_rank\": 2, \"due_date\": \"2025-03-17\", \"status\": \"pending\"}\n  ],\n  \"status\": \"success\",\n  \"message\": \"Les t√¢ches ont √©t√© g√©n√©r√©es et envoy√©es aux utilisateurs.\"\n}</code></pre>"
    ,"responses": {}
  
        }},
        "computeEarth": {
            "x-hidden": true,
            "get": {
                "tags": ["Groww-algorithm"],
                "summary": "computeEarth",
                "description": "<p>Cette route permet de calculer la distance entre deux points sur la Terre √† l'aide du service Google Maps.</p>
    <h3>Code associ√© :</h3>
    <pre><code class=\"language-javascript\">const { isBefore, parseISO } = require('date-fns');\n\n

const constants = require('./constants');\n\n
module.exports = function computeEarth(\n  
  user_plant,\n  
  actions,\n  
  events,\n  
  time_reference = new Date()\n
) {\n  
  const plant_events = events.filter(\n    
    (event) => event.plant_id === user_plant.id\n  
  );\n\n  
  // Trier les √©v√©nements par date d√©croissante\n  
  plant_events.sort((a, b) => new Date(b.date) - new Date(a.date));\n\n  
  // Extraction des derniers √©v√©nements pertinents\n  
  for (const event of plant_events) {\n    
    const action = actions.find((a) => a.id === event.action_id);\n\n    
    if (!action || event.skipped) {\n      
      continue;\n    
    }\n\n    
    // V√©rifie si l'action est autoris√©e pour l'√©v√©nement de la plante\n    
    if (!constants.ACTIONS_EARTH_ALLOWED.includes(action.type)) {\n      
      continue;\n    
    }\n\n    
    // V√©rifie si l'√©v√©nement a eu lieu avant la date de r√©f√©rence\n    
    if (isBefore(time_reference, parseISO(event.date))) {\n      
      continue;\n    
    }\n\n    
    // V√©rifie si l'action est une action de mise en terre\n    
    return constants.ACTIONS_EARTH.includes(action.type);\n  
  }\n\n  
  return user_plant.earth;\n
};</code></pre>\n\n
    <h3>Explication du Code :</h3>\n
    <p>Cette fonction <code>computeEarth</code> permet de d√©terminer si une plante a √©t√© plac√©e en terre ou non, en fonction des √©v√©nements qui lui sont associ√©s.</p>\n\n
    
    <h4>Fonctionnement :</h4>\n
    <ul>\n
      <li>Elle filtre la liste des √©v√©nements pour ne garder que ceux li√©s √† la plante de l'utilisateur.</li>\n
      <li>Elle trie ces √©v√©nements par date d√©croissante pour traiter les plus r√©cents en premier.</li>\n
      <li>Elle parcourt les √©v√©nements et r√©cup√®re l'action associ√©e √† chacun.</li>\n
      <li>Elle ignore les √©v√©nements qui ne sont pas autoris√©s ou qui ont √©t√© saut√©s.</li>\n
      <li>Elle v√©rifie si l'√©v√©nement a eu lieu avant la date de r√©f√©rence.</li>\n
      <li>Si l'action associ√©e fait partie des actions autoris√©es pour marquer la plante comme √©tant en terre, la fonction retourne <code>true</code>.</li>\n
      <li>Sinon, elle retourne la valeur actuelle de <code>user_plant.earth</code>.</li>\n
    </ul>\n\n
    
    <h4>Param√®tres :</h4>\n
    <ul>\n
      <li><code>user_plant</code> (Objet) : Contient les informations sur la plante de l'utilisateur.</li>\n
      <li><code>actions</code> (Tableau) : Liste des actions disponibles avec leurs identifiants.</li>\n
      <li><code>events</code> (Tableau) : Liste des √©v√©nements pass√©s de la plante.</li>\n
      <li><code>time_reference</code> (Date, optionnel) : Date utilis√©e comme point de r√©f√©rence pour filtrer les √©v√©nements (par d√©faut, la date actuelle).</li>\n
    </ul>\n\n
    
    <h4>Valeur de retour :</h4>\n
    <p>Retourne <code>true</code> si la plante est en terre, sinon retourne <code>false</code>.</p>",
    "responses": {}
            }
        },
        "computeOutside" : {
  "get": {
    "tags": ["Groww-algorithm"],
    "summary": "computeOutside",
    "description": "<p>Cette route permet d'analyser les √©v√©nements d'une plante afin de d√©terminer si elle a √©t√© plac√©e en ext√©rieur.</p>\n
    <h3>Code associ√© :</h3>\n
    <pre><code class=\"language-javascript\"> const { isBefore, parseISO } = require('date-fns');\n\n
const constants = require('./constants');\n\n
module.exports = function computeOutside(\n  
  user_plant,\n  
  actions,\n  
  events,\n  
  time_reference = new Date()\n
) {\n  
  const plant_events = events.filter(\n    
    (event) => event.plant_id === user_plant.id\n  
  );\n\n  

  // Trier les √©v√©nements par date d√©croissante\n  
  plant_events.sort((a, b) => parseISO(b.date) - parseISO(a.date));\n\n  
  // Extraction des derniers √©v√©nements pertinents\n  
  for (const event of plant_events) {\n    
    const action = actions.find((a) => a.id === event.action_id);\n\n    
    if (!action || event.skipped) {\n      
      continue;\n    
    }\n\n    
    // V√©rifie si l'action est autoris√©e pour placer la plante en ext√©rieur\n    
    if (!constants.ACTIONS_OUTSIDE_ALLOWED.includes(action.type)) {\n      
      continue;\n    
    }\n\n    
    // V√©rifie si l'√©v√©nement a eu lieu avant la date de r√©f√©rence\n    
    if (isBefore(time_reference, parseISO(event.date))) {\n      
      continue;\n    
    }\n\n    
    // V√©rifie si l'action est une action de mise en ext√©rieur\n    
    return constants.ACTIONS_OUTSIDE.includes(action.type);\n  
  }\n\n  
  return user_plant.outside;\n
};</code></pre>\n\n
    <h3>Explication du Code :</h3>\n
    <p>Cette fonction <code>computeOutside</code> permet de d√©terminer si une plante a √©t√© plac√©e en ext√©rieur en fonction des √©v√©nements qui lui sont associ√©s.</p>\n\n
    
    <h4>Fonctionnement :</h4>\n
    <ul>\n
      <li>Elle filtre la liste des √©v√©nements pour ne garder que ceux li√©s √† la plante de l'utilisateur.</li>\n
      <li>Elle trie ces √©v√©nements par date d√©croissante pour traiter les plus r√©cents en premier.</li>\n
      <li>Elle parcourt les √©v√©nements et r√©cup√®re l'action associ√©e √† chacun.</li>\n
      <li>Elle ignore les √©v√©nements qui ne sont pas autoris√©s ou qui ont √©t√© saut√©s.</li>\n
      <li>Elle v√©rifie si l'√©v√©nement a eu lieu avant la date de r√©f√©rence.</li>\n
      <li>Si l'action associ√©e fait partie des actions autoris√©es pour marquer la plante comme √©tant en ext√©rieur, la fonction retourne <code>true</code>.</li>\n
      <li>Sinon, elle retourne la valeur actuelle de <code>user_plant.outside</code>.</li>\n
    </ul>\n\n
    
    <h4>Param√®tres :</h4>\n
    <ul>\n
      <li><code>user_plant</code> (Objet) : Contient les informations sur la plante de l'utilisateur.</li>\n
      <li><code>actions</code> (Tableau) : Liste des actions disponibles avec leurs identifiants.</li>\n
      <li><code>events</code> (Tableau) : Liste des √©v√©nements pass√©s de la plante.</li>\n
      <li><code>time_reference</code> (Date, optionnel) : Date utilis√©e comme point de r√©f√©rence pour filtrer les √©v√©nements (par d√©faut, la date actuelle).</li>\n
    </ul>\n\n
    
    <h4>Valeur de retour :</h4>\n
    <p>Retourne <code>true</code> si la plante est en ext√©rieur, sinon retourne <code>false</code>.</p>",
    "responses": {}
  }
        },
    "compute":{
        "get": {
            "tags": ["Groww-algorithm"],
            "summary": "compute",
            "description": "<p>Cette route permet de calculer les t√¢ches de plantation d'une plante en fonction des actions, des √©v√©nements et des conditions m√©t√©orologiques.</p>\n
    <h3>Code associ√© :</h3>\n
    <pre><code class=\"language-javascript\">const { startOfDay } = require('date-fns');\n\n
const constants = require('./constants');\n\n
const getTasks = require('./tasks');\n\n
module.exports = function computeTaks(\n  
  actions = [],\n  
  plants = [],\n  
  user_plants = [],\n  
  events = [],\n  
  weather = {},\n  
  reverse = false,\n  
  time_reference = new Date()\n
) {\n  
  if (!Array.isArray(actions)) {\n    
    actions = Object.values(actions);\n  
  }\n\n  
  if (!Array.isArray(plants)) {\n    
    plants = Object.values(plants);\n  
  }\n\n  
  if (!Array.isArray(user_plants)) {\n    
    user_plants = Object.values(user_plants);\n  
  }\n\n  
  if (!Array.isArray(events)) {\n    
    events = Object.values(events);\n  
  }\n\n  
  time_reference = startOfDay(time_reference);\n\n  
  if (!weather.etp) {\n    
    weather.etp = constants.ETP_REFERENCE;\n  
  }\n\n  
  if (!weather.data) {\n    
    weather.data = [];\n  
  }\n\n  
  let tasks = [];\n\n  
  user_plants.forEach((user_plant) => {\n    
    if (!user_plant || user_plant.dont_follow_tasks || user_plant.deleted) {\n      
      return;\n    
    }\n\n    
    const plant = plants.find(\n      
      (plant) => plant.visible && plant.id === user_plant.plant_id\n    
    );\n\n    
    if (!plant) {\n      
      return;\n    
    }\n\n    
    const plant_events = events.filter(\n      
      (event) => event.plant_id === user_plant.id && !event.deleted\n    
    );\n\n    
    const plant_actions = actions\n
      .map((action) => {\n        
        if (!action.visible) {\n          
          return;\n        
        }\n\n        
        const action_plant = plant.actions.find(\n          
          (action_plant) => action.id === action_plant.id\n        
        );\n\n        
        const action_final = {};\n\n        
        action_final.id = action.id;\n        
        action_final.type = action.type;\n        
        action_final.at_start = action.at_start || false;\n        
        action_final.at_end = action.at_end || false;\n        
        action_final.in_plant = !!action_plant;\n\n        
        if (action_final.in_plant) {\n          
          action_final.todos =\n            
            ((action_plant && action_plant.todos) || []).filter(\n              
              (todo) => todo.visible\n            
            ) || [];\n        
        }\n\n        
        return action_final;\n      
      })\n
      .filter((action) => !!action);\n\n  
    tasks = tasks.concat(\n      
      getTasks(\n        
        user_plant,\n        
        plant,\n        
        plant_actions,\n        
        plant_events,\n        
        weather,\n        
        reverse,\n        
        time_reference\n      
      )\n    
    );\n  
  });\n\n  
  return tasks;\n
};</code></pre>\n\n
    <h3>Explication du Code :</h3>\n
    <p>Cette fonction <code>computeTaks</code> calcule les t√¢ches de plantation d'une plante en fonction des √©v√©nements, des actions et des conditions m√©t√©orologiques.</p>\n\n
    
    <h4>Fonctionnement :</h4>\n
    <ul>\n
      <li>Elle commence par v√©rifier et convertir les param√®tres en tableaux si n√©cessaire.</li>\n
      <li>Elle r√©cup√®re les donn√©es m√©t√©orologiques, y compris l'ETP (√âvapotranspiration) et les pr√©cipitations.</li>\n
      <li>Elle parcourt les plantes de l'utilisateur et filtre les √©v√©nements associ√©s √† chaque plante.</li>\n
      <li>Elle associe les actions disponibles aux plantes et les filtre selon leur visibilit√© et pertinence.</li>\n
      <li>Elle g√©n√®re une liste de t√¢ches via la fonction <code>getTasks</code>, qui est ensuite retourn√©e.</li>\n
    </ul>\n\n
    
    <h4>Param√®tres :</h4>\n
    <ul>\n
      <li><code>actions</code> (Tableau ou Objet) : Liste des actions disponibles (ou un objet √† convertir en tableau).</li>\n
      <li><code>plants</code> (Tableau ou Objet) : Liste des plantes disponibles (ou un objet √† convertir en tableau).</li>\n
      <li><code>user_plants</code> (Tableau ou Objet) : Liste des plantes de l'utilisateur (ou un objet √† convertir en tableau).</li>\n
      <li><code>events</code> (Tableau ou Objet) : Liste des √©v√©nements associ√©s aux plantes (ou un objet √† convertir en tableau).</li>\n
      <li><code>weather</code> (Objet) : Objet contenant les donn√©es m√©t√©orologiques, dont l'ETP et les pr√©cipitations.</li>\n
      <li><code>reverse</code> (Boolean) : Si <code>true</code>, inverse l'ordre des t√¢ches g√©n√©r√©es.</li>\n
      <li><code>time_reference</code> (Date) : Date de r√©f√©rence √† partir de laquelle les √©v√©nements sont consid√©r√©s (par d√©faut, la date actuelle).</li>\n
    </ul>\n\n
    
    <h4>Valeur de retour :</h4>\n
    <p>Retourne un tableau de t√¢ches √† effectuer pour la plante en fonction des √©v√©nements, des actions et des conditions m√©t√©orologiques.</p>",
    "responses": {}
}},
        "post-conditions":{"get": {
    "tags": ["Groww-algorithm"],
    "summary": "post-conditions",
    "description": "<p>Cette route permet de v√©rifier les conditions de la t√¢che avant de l'ex√©cuter en fonction des √©v√©nements pass√©s et de la date de r√©f√©rence.</p>\n
        <h3>Code associ√© :</h3>\n
        <pre><code class=\"language-javascript\">const {\n  startOfDay,\n  differenceInMonths,\n  differenceInYears,\n  parseISO,\n} = require('date-fns');\n\n
module.exports = function postConditions(\n  todo,\n  user_plant,\n  at_start_event,\n  task,\n  time_reference = new Date()\n) {\n  
  if (!task) {\n    
    return false;\n  
  }\n\n  
  if (!todo.conditions || todo.conditions.length === 0) {\n    
    return true;\n  
  }\n\n  
  for (const condition of todo.conditions) {\n    
    let delta;\n\n    
    switch (condition) {\n      
      case 'firstMonth':\n        
        if (!at_start_event) {\n          
          return false;\n        
        }\n\n        
        delta =\n          
          at_start_event.date &&\n          
          differenceInMonths(\n            
            time_reference,\n            
            startOfDay(parseISO(at_start_event.date))\n          
          );\n\n        
        if (delta !== 0) {\n          
          return false;\n        
        }\n        
        break;\n\n      
      case 'firstYear':\n        
        if (!at_start_event) {\n          
          return false;\n        
        }\n\n        
        delta =\n          
          at_start_event.date &&\n          
          differenceInYears(\n            
            time_reference,\n            
            startOfDay(parseISO(at_start_event.date))\n          
          );\n\n        
        if (delta !== 0) {\n          
          return false;\n        
        }\n        
        break;\n\n      
      default:\n        
        break;\n    
    }\n  
  }\n\n  
  return true;\n};</code></pre>\n\n
    <h3>Explication du Code :</h3>\n
    <p>La fonction <code>postConditions</code> v√©rifie si une t√¢che peut √™tre effectu√©e en fonction de certaines conditions li√©es √† l'√©v√©nement de d√©but et √† la date de r√©f√©rence.</p>\n\n
    
    <h4>Fonctionnement :</h4>\n
    <ul>\n
      <li>Elle v√©rifie d'abord si la t√¢che est d√©finie.</li>\n
      <li>Ensuite, elle s'assure que des conditions sont d√©finies dans la t√¢che.</li>\n
      <li>Pour chaque condition, elle v√©rifie si la date de d√©but de l'√©v√©nement respecte la condition (mois ou ann√©e).</li>\n
      <li>Si la condition est respect√©e, elle retourne <code>true</code>, sinon elle retourne <code>false</code>.</li>\n
    </ul>\n\n
    
    <h4>Param√®tres :</h4>\n
    <ul>\n
      <li><code>todo</code> (Objet) : L'objet contenant les informations de la t√¢che √† v√©rifier, y compris les conditions associ√©es.</li>\n
      <li><code>user_plant</code> (Objet) : L'objet repr√©sentant la plante de l'utilisateur.</li>\n
      <li><code>at_start_event</code> (Objet) : L'objet repr√©sentant l'√©v√©nement au d√©but de la t√¢che (contient la date de l'√©v√©nement).</li>\n
      <li><code>task</code> (Objet) : L'objet de la t√¢che √† v√©rifier.</li>\n
      <li><code>time_reference</code> (Date) : La date de r√©f√©rence utilis√©e pour la comparaison des conditions (par d√©faut, la date actuelle).</li>\n
    </ul>\n\n
    
    <h4>Valeur de retour :</h4>\n
    <p>Retourne <code>true</code> si toutes les conditions sont remplies, sinon retourne <code>false</code>.</p>",
    "responses": {}
  }},
        "pre-conditions":{"get": {
    "tags": ["Groww-algorithm"],
    "summary": "pre-conditions",
    "description": "<p>Cette route permet de v√©rifier les conditions pr√©alables qu'une t√¢che doit remplir avant de pouvoir √™tre ex√©cut√©e sur une plante en fonction de son √©tat.</p>\n
    <h3>Code associ√© :</h3>\n
    <pre><code class=\"language-javascript\">module.exports = function preConditions(\n  todo,\n  user_plant,\n  actions,\n  events,\n  time_reference = new Date()\n) {\n  
  if (!todo.conditions || todo.conditions.length === 0) {\n    
    return true;\n  }\n\n  
  for (const condition of todo.conditions) {\n    
    switch (condition) {\n      
      case 'inside':\n        
        if (user_plant.outside) {\n          
          return false;\n        
        }\n        
        break;\n      
      case 'outside':\n        
        if (!user_plant.outside) {\n          
          return false;\n        
        }\n        
        break;\n      
      case 'pot':\n        
        if (user_plant.earth) {\n          
          return false;\n        
        }\n        
        break;\n      
      case 'earth':\n        
        if (!user_plant.earth) {\n          
          return false;\n        
        }\n        
        break;\n      
      case 'onDryAlert':\n        
        return false;\n      
      case 'onNotifSent':\n        
        return false;\n      
      default:\n        
        break;\n    
    }\n  }\n\n  
        return true;\n};</code></pre>\n\n
    <h3>Explication du Code :</h3>\n
    <p>La fonction <code>preConditions</code> v√©rifie si les conditions pr√©alables sont remplies avant d'ex√©cuter une t√¢che sur une plante. Elle prend en compte l'√©tat de la plante (√† l'int√©rieur ou √† l'ext√©rieur, dans un pot ou en terre, etc.) et les conditions d√©finies dans la t√¢che.</p>\n\n
    
    <h4>Fonctionnement :</h4>\n
    <ul>\n
      <li>La fonction parcourt les conditions d√©finies dans la t√¢che (par exemple : 'inside', 'outside', 'pot', etc.).</li>\n
      <li>Pour chaque condition, elle v√©rifie si l'√©tat actuel de la plante (par exemple, si elle est √† l'ext√©rieur, dans un pot, etc.) correspond √† la condition de la t√¢che.</li>\n
      <li>Si une condition n'est pas remplie, la fonction retourne <code>false</code>, ce qui signifie que la t√¢che ne peut pas √™tre effectu√©e.</li>\n
      <li>Si toutes les conditions sont remplies, la fonction retourne <code>true</code>, et la t√¢che peut √™tre ex√©cut√©e.</li>\n
    </ul>\n\n
    
    <h4>Param√®tres :</h4>\n
    <ul>\n
      <li><code>todo</code> (Objet) : L'objet contenant les informations de la t√¢che √† v√©rifier, y compris les conditions associ√©es.</li>\n
      <li><code>user_plant</code> (Objet) : L'objet repr√©sentant la plante de l'utilisateur, avec des propri√©t√©s comme <code>outside</code> (indique si la plante est √† l'ext√©rieur) et <code>earth</code> (indique si la plante est en terre).</li>\n
      <li><code>actions</code> (Tableau) : Un tableau des actions disponibles pour l'utilisateur.</li>\n
      <li><code>events</code> (Tableau) : Un tableau des √©v√©nements associ√©s √† l'utilisateur.</li>\n
      <li><code>time_reference</code> (Date) : La date de r√©f√©rence utilis√©e pour la comparaison des conditions (par d√©faut, la date actuelle).</li>\n
    </ul>\n\n
    
    <h4>Valeur de retour :</h4>\n
    <p>Retourne <code>true</code> si toutes les conditions sont remplies, sinon retourne <code>false</code>.</p>",
    "responses": {}
  }},
        "":{"get": {
    "tags": ["Groww-algorithm"],
    "summary": "tasks-for-at-start",
    "description": "<p>Cette route permet de g√©n√©rer une t√¢che qui doit √™tre effectu√©e au d√©but du mois, en tenant compte des dates de due_date d√©finies dans la t√¢che. Si la due_date pour le mois actuel est d√©finie comme '0', la fonction recherche la prochaine date disponible pour la t√¢che.</p>\n
    <h3>Code associ√© :</h3>\n
    <pre><code class=\"language-javascript\">const { startOfDay, startOfMonth, addMonths } = require('date-fns');\n\nmodule.exports = function tasksForAtStart(\n  todo,\n  user_plant,\n  plant,\n  actions,\n  weather,\n  time_reference = new Date()\n) {\n  
  let task_date = startOfDay(time_reference);\n  
  const task_month = time_reference.getMonth();\n\n  
  // Tache en dehors de la due_date\n  
  if (todo.due_date && todo.due_date[task_month] === '0') {\n    
    // On recherche la prochaine date\n    
    for (let month_delta = 0; month_delta < 12; month_delta += 1) {\n      
      if (\n        
        todo.due_date &&\n        
        todo.due_date[(task_month + month_delta) % 12] === '1'\n      
      ) {\n        
        task_date = startOfMonth(addMonths(task_date, month_delta));\n        
        break;\n      
      }\n    
    }\n  }\n\n  
  const task = {\n    
    action_id: todo.action_id,\n    
    todo,\n    
    date: task_date,\n  
  };\n\n  
  return task;\n};</code></pre>\n\n
    <h3>Explication du Code :</h3>\n
    <p>La fonction <code>tasksForAtStart</code> g√©n√®re une t√¢che en fonction de la date de d√©but du mois et de la gestion de la date de <code>due_date</code> (date limite de la t√¢che). Si la date limite pour le mois en cours est '0', elle cherche la premi√®re date valide dans les mois suivants.</p>\n\n
    
    <h4>Fonctionnement :</h4>\n
    <ul>\n
      <li>La fonction commence par obtenir la date du jour et d√©termine le mois actuel.</li>\n
      <li>Si la <code>due_date</code> pour ce mois est '0', elle recherche la prochaine <code>due_date</code> dans les mois suivants.</li>\n
      <li>La fonction retourne la premi√®re date disponible pour effectuer la t√¢che, qui sera au d√©but du mois trouv√©.</li>\n
    </ul>\n\n
    
    <h4>Param√®tres :</h4>\n
    <ul>\n
      <li><code>todo</code> (Objet) : L'objet contenant les informations de la t√¢che, y compris la <code>due_date</code> pour chaque mois.</li>\n
      <li><code>user_plant</code> (Objet) : L'objet repr√©sentant la plante de l'utilisateur (pas directement utilis√© ici, mais pourrait √™tre utilis√© dans une version √©tendue).</li>\n
      <li><code>plant</code> (Objet) : L'objet repr√©sentant la plante (non utilis√© dans cette version, mais est inclus pour la structure).</li>\n
      <li><code>actions</code> (Tableau) : Un tableau des actions associ√©es √† la t√¢che.</li>\n
      <li><code>weather</code> (Objet) : Les donn√©es m√©t√©orologiques associ√©es √† la t√¢che (non utilis√© dans cette version).</li>\n
      <li><code>time_reference</code> (Date) : La date de r√©f√©rence utilis√©e pour d√©terminer le mois actuel (par d√©faut, la date actuelle).</li>\n
    </ul>\n\n
    
    <h4>Valeur de retour :</h4>\n
    <p>Retourne un objet repr√©sentant la t√¢che, avec l'ID de l'action, la t√¢che elle-m√™me et la date calcul√©e pour effectuer cette t√¢che.</p>",
    "responses": {}
  }},
        "tasks-from-last-event":{"get": {
    "tags": ["Groww-algorithm"],
    "summary": "tasks-from-last-event",
    "description": "<p>Cette route permet de g√©n√©rer une t√¢che √† partir du dernier √©v√©nement effectu√© pour une plante donn√©e. La g√©n√©ration de la t√¢che tient compte des dates de d√©clenchement minimales et maximales, ainsi que des conditions m√©t√©orologiques (comme les pr√©cipitations et la temp√©rature).</p>\n
    <h3>Code associ√© :</h3>\n
    <pre><code class=\"language-javascript\">const {\n  isSameDay,\n  isAfter,\n  isBefore,\n  isValid,\n  startOfDay,\n  startOfMonth,\n  addDays,\n  addMonths,\n  parseISO,\n} = require('date-fns');\n\nconst constants = require('./constants');\n\n// Taches en cycle_rank = 0\nmodule.exports = function tasksFromLastEvent(\n  todo,\n  last_event,\n  user_plant,\n  plant,\n  actions,\n  weather,\n  time_reference = new Date()\n) {\n  if (!last_event) {\n    return;\n  }\n\n  const last_event_date = isValid(last_event.date)\n    ? last_event.date\n    : parseISO(last_event.date);\n\n  const action = actions.find((a) => a.id === todo.action_id);\n\n  let etp = constants.ETP_REFERENCE;\n  let { trigger_min } = todo;\n  const { trigger_max } = todo;\n\n  // On filtre les arrosages\n  if (action.type === 'WATER') {\n    etp = Math.max(\n      weather.etp,\n      !user_plant.outside ? constants.ETP_REFERENCE : 0\n    );\n\n    trigger_min = Math.round(\n      Math.max(1, (trigger_min * constants.ETP_REFERENCE) / etp)\n    );\n  }\n\n  let task_date_min = addDays(startOfDay(last_event_date), trigger_min);\n  const task_date_max = addDays(startOfDay(last_event_date), trigger_max);\n\n  if (user_plant.outside && action.type === 'WATER') {\n    let data;\n    const threshold =\n      plant.threshold + (user_plant.earth ? 0 : constants.DELTA_POT);\n\n    if (isBefore(task_date_min, time_reference)) {\n      task_date_min = startOfDay(new Date(time_reference));\n    }\n\n    do {\n      data = weather.data.find((value) => isSameDay(task_date_min, value.date));\n\n      if (data && data.water_stock > threshold) {\n        task_date_min = addDays(task_date_min, 1);\n        continue;\n      }\n\n      if (data && data.rain > etp + 1) {\n        task_date_min = addDays(task_date_min, 1);\n        continue;\n      }\n\n      break;\n    } while (data);\n  } else if (\n    (weather.data || []).length === 0 &&\n    (action.type === 'PROTECT' ||\n      action.type === 'GETINSIDE' ||\n      action.type === 'PUTOUTSIDE')\n  ) {\n    return;\n  } else if (\n    action.type === 'PROTECT' ||\n    action.type === 'GETINSIDE' ||\n    action.type === 'PUTOUTSIDE'\n  ) {\n    if (isAfter(task_date_min, time_reference)) {\n      return;\n    }\n\n    const threshold = constants.RUSTICITY[plant.rusticity_zone];\n\n    switch (action.type) {\n      case 'PUTOUTSIDE':\n        if (threshold + constants.DELTA_RUSTICITY_MAX > weather.temp_min) {\n          return;\n        }\n        break;\n      case 'PROTECT':\n      case 'GETINSIDE':\n        if (threshold + constants.DELTA_RUSTICITY_MIN < weather.temp_min) {\n          return;\n        }\n        break;\n      default:\n        break;\n    }\n\n    task_date_min = startOfDay(new Date(time_reference));\n  }\n\n  const task_month = task_date_min.getMonth();\n\n  if (todo.due_date && todo.due_date[task_month] === '0') {\n    if (todo.cycle_rank !== 0) {\n      return;\n    }\n\n    // On recherche la prochaine date\n    for (let month_delta = 0; month_delta < 12; month_delta += 1) {\n      if (\n        todo.due_date &&\n        todo.due_date[(task_month + month_delta) % 12] === '1'\n      ) {\n        task_date_min = startOfMonth(addMonths(task_date_min, month_delta));\n        break;\n      }\n    }\n  }\n\n  if (\n    isAfter(task_date_max, task_date_min) &&\n    isAfter(task_date_max, time_reference)\n  ) {\n    return;\n  }\n\n  if (isBefore(task_date_min, time_reference)) {\n    const reference_month = time_reference.getMonth();\n\n    if (todo.due_date && todo.due_date[reference_month] === '0') {\n      return;\n    }\n  }\n\n  const task = {\n    action_id: todo.action_id,\n    todo,\n    date: task_date_min,\n  };\n\n  if (todo.cycle_rank === 0 && isSameDay(time_reference, last_event_date)) {\n    return;\n  }\n\n  if (task.action_id === last_event.action_id) {\n    task.last_event = last_event;\n  }\n\n  return task;\n};</code></pre>\n\n
    <h3>Explication du Code :</h3>\n
    <p>La fonction <code>tasksFromLastEvent</code> g√©n√®re une t√¢che bas√©e sur les √©v√©nements pass√©s et les conditions actuelles de la plante. Elle prend en compte les conditions de d√©clenchement li√©es √† la date de l'√©v√©nement pr√©c√©dent, les dates minimales et maximales pour chaque t√¢che, ainsi que les conditions climatiques actuelles.</p>\n\n
    
    <h4>Fonctionnement :</h4>\n
    <ul>\n
      <li>La fonction commence par v√©rifier si l'√©v√©nement pr√©c√©dent existe et est valide.</li>\n
      <li>Elle ajuste la t√¢che en fonction des donn√©es m√©t√©orologiques, comme les pr√©cipitations et les temp√©ratures minimales et maximales.</li>\n
      <li>Elle applique des r√®gles sp√©cifiques pour diff√©rents types d'actions (par exemple, \"WATER\", \"PROTECT\", \"PUTOUTSIDE\", etc.).</li>\n
      <li>Si la t√¢che d√©passe les limites de d√©clenchement, elle passe √† l'action suivante. Sinon, elle retourne la t√¢che g√©n√©r√©e avec les d√©tails appropri√©s.</li>\n
    </ul>\n\n
    
    <h4>Param√®tres :</h4>\n
    <ul>\n
      <li><code>todo</code> (Objet) : L'objet contenant les informations de la t√¢che, y compris la <code>due_date</code> et les conditions de d√©clenchement (min et max).</li>\n
      <li><code>last_event</code> (Objet) : L'objet repr√©sentant le dernier √©v√©nement effectu√© pour la plante.</li>\n
      <li><code>user_plant</code> (Objet) : L'objet repr√©sentant la plante de l'utilisateur.</li>\n
      <li><code>plant</code> (Objet) : L'objet repr√©sentant la plante avec des informations suppl√©mentaires, comme la zone de rusticit√©.</li>\n
      <li><code>actions</code> (Tableau) : Un tableau des actions associ√©es √† la t√¢che.</li>\n
      <li><code>weather</code> (Objet) : Les donn√©es m√©t√©orologiques, y compris les temp√©ratures minimales, les pr√©cipitations, et les stocks d'eau disponibles.</li>\n
      <li><code>time_reference</code> (Date) : La date de r√©f√©rence utilis√©e pour d√©terminer les dates minimales et maximales pour effectuer la t√¢che.</li>\n
    </ul>\n\n
    
    <h4>Valeur de retour :</h4>\n
    <p>Retourne un objet repr√©sentant la t√¢che, avec l'ID de l'action, la t√¢che elle-m√™me et la date calcul√©e pour effectuer cette t√¢che. Si les conditions ne sont pas remplies, la fonction retourne <code>undefined</code>.</p>",
    "responses": {}
  }},
        "tasks":{"get": {
    "tags": ["Groww-algorithm"],
    "summary": "tasks",
    "description": "<p>Cette route permet de g√©n√©rer une liste de t√¢ches √† partir des √©v√©nements pass√©s et des actions √† effectuer pour une plante. Elle tient compte des pr√©-conditions, des post-conditions et des conditions m√©t√©orologiques pour chaque t√¢che.</p>\n
    <h3>Code associ√© :</h3>\n
    <pre><code class=\"language-javascript\">const { isValid, parseISO } = require('date-fns');\n\nconst computeOutside = require('./compute-outside');\nconst computeEarth = require('./compute-earth');\nconst hasValidPreCondition = require('./pre-conditions');\nconst hasValidPostCondition = require('./post-conditions');\nconst getTaskFromLastEvent = require('./tasks-from-last-event');\nconst getTaskForAtStart = require('./tasks-for-at-start');\n\nfunction filterTasks(tasks, min_cycle_rank = 1000) {\n  const unique_actions = {};\n\n  // Filtre par action_id (unique) et par rank_cycle\n  return tasks\n    .sort((a, b) => a.date - b.date)\n    .filter((task) => {\n      if (task.action_id in unique_actions) {\n        return false;\n      }\n\n      if (task.cycle_rank > min_cycle_rank) {\n        return false;\n      }\n\n      unique_actions[task.action_id] = true;\n\n      return true;\n    });\n}\n\nmodule.exports = function getTasks(\n  user_plant,\n  plant,\n  actions,\n  events,\n  weather,\n  reverse = false,\n  time_reference = new Date()\n) {\n  const tasks = [];\n  const todos = [];\n  const todos_at_start = [];\n  const todos_ordered_by_cycle_rank = [];\n  const last_event_by_action_id = {};\n  let min_cycle_rank = 1000;\n  let at_start_event;\n\n  // Sort events\n  events.sort((a, b) => {\n    const a_date = isValid(a.date) ? a.date : parseISO(a.date);\n    const b_date = isValid(b.date) ? b.date : parseISO(b.date);\n\n    return b_date - a_date;\n  });\n\n  let has_ended = false;\n\n  // Extraction des derniers √©v√©nements par action_id\n  // Extraction des at_start et todos hors cycle_rank\n  actions.forEach((action) => {\n    const last_event = events.find((event) => event.action_id === action.id);\n\n    if (last_event) {\n      if (action.at_end) {\n        has_ended = true;\n        return;\n      }\n\n      if (action.at_start) {\n        at_start_event = at_start_event || last_event;\n      }\n\n      last_event_by_action_id[action.id] = last_event;\n    }\n\n    if (!action.in_plant) {\n      return;\n    }\n\n    action.todos.forEach((todo) => {\n      todo.action_id = action.id;\n\n      if (reverse) {\n        const start_of_year = todo.due_date.substring(0, 6);\n        const end_of_year = todo.due_date.substring(6, 12);\n\n        todo.due_date = end_of_year + start_of_year;\n      }\n\n      if (todo.cycle_rank !== 0) {\n        todos_ordered_by_cycle_rank.push(todo);\n      }\n\n      if (action.at_start) {\n        todos_at_start.push(todo);\n        return;\n      }\n\n      todos.push(todo);\n    });\n  });\n\n  if (has_ended) {\n    return [];\n  }\n\n  if (events.length === 0) {\n    todos_at_start.forEach((todo) => {\n      if (user_plant.id_action && user_plant.id_action !== todo.action_id) {\n        return;\n      }\n\n      if (\n        !hasValidPreCondition(todo, user_plant, actions, events, time_reference)\n      ) {\n        return;\n      }\n\n      const task = getTaskForAtStart(\n        todo,\n        user_plant,\n        plant,\n        actions,\n        weather,\n        time_reference\n      );\n\n      if (task) {\n        task.plant_id = user_plant.id;\n\n        tasks.push(task);\n      }\n    });\n\n    return filterTasks(tasks);\n  }\n\n  // Sort todos\n  todos_ordered_by_cycle_rank.sort((a, b) => a.cycle_rank - b.cycle_rank);\n\n  user_plant.outside = computeOutside(\n    user_plant,\n    actions,\n    events,\n    time_reference\n  );\n  user_plant.earth = computeEarth(user_plant, actions, events, time_reference);\n\n  // Calcul des taches par todo\n  todos.forEach((todo) => {\n    if (\n      !hasValidPreCondition(todo, user_plant, actions, events, time_reference)\n    ) {\n      return;\n    }\n\n    let last_event = last_event_by_action_id[todo.action_id];\n\n    if (last_event && todo.cycle_rank !== 0) {\n      return;\n    }\n\n    if (!last_event && todo.cycle_rank === 0) {\n      last_event = at_start_event;\n    }\n\n    if (!last_event && todo.cycle_rank !== 0) {\n      let counter = 0;\n\n      while (!last_event && counter < 100) {\n        counter += 1;\n\n        const last_todo = todos_ordered_by_cycle_rank.find(\n          (todo_ordered) =>\n            todo_ordered.cycle_rank === todo.cycle_rank - counter\n        );\n\n        if (!last_todo) {\n          continue;\n        }\n\n        last_event = events.find(\n          (event) => event.action_id === last_todo.action_id\n        );\n      }\n    }\n\n    const task = getTaskFromLastEvent(\n      todo,\n      last_event,\n      user_plant,\n      plant,\n      actions,\n      weather,\n      time_reference\n    );\n\n    if (\n      !hasValidPostCondition(\n        todo,\n        user_plant,\n        at_start_event,\n        task,\n        time_reference\n      )\n    ) {\n      return;\n    }\n\n    if (todo.cycle_rank !== 0) {\n      min_cycle_rank = Math.min(min_cycle_rank, todo.cycle_rank);\n    }\n\n    task.plant_id = user_plant.id;\n    task.cycle_rank = todo.cycle_rank;\n\n    tasks.push(task);\n  });\n\n  return filterTasks(tasks, min_cycle_rank);\n};</code></pre>\n\n
    <h3>Explication du Code :</h3>\n
    <p>La fonction <code>getTasks</code> g√©n√®re des t√¢ches bas√©es sur les √©v√©nements et les actions disponibles pour une plante. Elle v√©rifie les pr√©-conditions et les post-conditions pour chaque t√¢che et les trie selon les priorit√©s du cycle des actions.</p>\n\n
    <h4>Fonctionnement :</h4>\n
    <ul>\n
      <li>Les √©v√©nements sont tri√©s par date pour d√©terminer l'ordre des t√¢ches.</li>\n
      <li>Les t√¢ches sont calcul√©es √† partir des actions et des pr√©-conditions, et sont filtr√©es en fonction des conditions des plantes.</li>\n
      <li>Les t√¢ches sont g√©n√©r√©es en tenant compte des √©v√©nements pass√©s, des t√¢ches qui doivent √™tre effectu√©es au d√©but, et des conditions climatiques comme l'ext√©rieur et la terre.</li>\n
    </ul>\n\n
    <h4>Param√®tres :</h4>\n
    <ul>\n
      <li><code>user_plant</code> (Objet) : L'objet repr√©sentant la plante de l'utilisateur.</li>\n
      <li><code>plant</code> (Objet) : L'objet repr√©sentant la plante avec des informations suppl√©mentaires.</li>\n
      <li><code>actions</code> (Tableau) : Un tableau des actions associ√©es √† la plante.</li>\n
      <li><code>events</code> (Tableau) : Un tableau des √©v√©nements pass√©s pour cette plante.</li>\n
      <li><code>weather</code> (Objet) : Les donn√©es m√©t√©orologiques actuelles.</li>\n
      <li><code>reverse</code> (Boolean) : Un indicateur pour inverser l'ordre des t√¢ches.</li>\n
      <li><code>time_reference</code> (Date) : La date de r√©f√©rence utilis√©e pour d√©terminer l'ordre des t√¢ches.</li>\n
    </ul>\n\n
    <h4>Retour :</h4>\n
    <p>Une liste de t√¢ches calcul√©es pour la plante en fonction des crit√®res sp√©cifi√©s.</p>","responses": {}
  },
  },
      "/actions": {
        "get": {
          "tags": ["Groww-api-next"],
          "summary": "R√©cup√©rer la liste des actions",
          "description": "Cette route permet de r√©cup√©rer une liste d'actions selon les param√®tres de pagination et de filtrage.",
          "parameters": [
            {
              "name": "page",
              "in": "query",
              "required": true,
              "schema": {
                "type": "integer",
                "example": 1
              },
              "description": "Le num√©ro de la page √† r√©cup√©rer."
            },
            {
              "name": "pageSize",
              "in": "query",
              "required": true,
              "schema": {
                "type": "integer",
                "example": 10
              },
              "description": "Le nombre d'actions par page."
            },
            {
              "name": "plantId",
              "in": "query",
              "required": false,
              "schema": {
                "type": "string",
                "example": "12345"
              },
              "description": "Filtre optionnel pour r√©cup√©rer les actions d'une plante sp√©cifique."
            }
          ],
          "responses": {
            "200": {
              "description": "Liste des actions r√©cup√©r√©e avec succ√®s",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "metadata": {
                        "type": "object",
                        "properties": {
                          "pagination": {
                            "type": "object",
                            "properties": {
                              "page": {
                                "type": "integer"
                              },
                              "pageSize": {
                                "type": "integer"
                              },
                              "pageCount": {
                                "type": "integer"
                              },
                              "total": {
                                "type": "integer"
                              }
                            }
                          }
                        }
                      },
                      "results": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string"
                            },
                            "label": {
                              "type": "string"
                            },
                            "title": {
                              "type": "string"
                            },
                            "adjectival": {
                              "type": "string"
                            },
                            "callToAction": {
                              "type": "string"
                            },
                            "notify": {
                              "type": "boolean"
                            },
                            "diary": {
                              "type": "string"
                            },
                            "conditions": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Erreur de validation des param√®tres"
            },
            "500": {
              "description": "Erreur interne du serveur"
            }
          }
        }
      },
      "/actions/{id}": {
        "get": {
          "tags": ["Groww-api-next"],
          "summary": "R√©cup√©rer une action par son ID",
          "description": "Cette route permet de r√©cup√©rer les d√©tails d'une action sp√©cifique via son identifiant unique.",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "example": "12345"
              },
              "description": "ID de l'action √† r√©cup√©rer."
            }
          ],
          "responses": {
            "200": {
              "description": "Action r√©cup√©r√©e avec succ√®s",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string"
                      },
                      "label": {
                        "type": "string"
                      },
                      "title": {
                        "type": "string"
                      },
                      "adjectival": {
                        "type": "string"
                      },
                      "callToAction": {
                        "type": "string"
                      },
                      "notify": {
                        "type": "boolean"
                      },
                      "diary": {
                        "type": "string"
                      },
                      "conditions": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            "404": {
              "description": "Action non trouv√©e"
            },
            "500": {
              "description": "Erreur interne du serveur"
            }
          }
        }
      },
      "/categories": {
      "get": {
        "tags": ["Groww-api-next"],
        "summary": "R√©cup√©rer la liste des cat√©gories",
        "description": "Cette route permet de r√©cup√©rer une liste de cat√©gories selon les param√®tres de pagination.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 1
            },
            "description": "Le num√©ro de la page √† r√©cup√©rer."
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 10
            },
            "description": "Le nombre de cat√©gories par page."
          }
        ],
        "responses": {
          "200": {
            "description": "Liste des cat√©gories r√©cup√©r√©e avec succ√®s",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "metadata": {
                      "type": "object",
                      "properties": {
                        "pagination": {
                          "type": "object",
                          "properties": {
                            "page": {
                              "type": "integer"
                            },
                            "pageSize": {
                              "type": "integer"
                            },
                            "pageCount": {
                              "type": "integer"
                            },
                            "total": {
                              "type": "integer"
                            }
                          }
                        }
                      }
                    },
                    "results": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string"
                          },
                          "label": {
                            "type": "string"
                          },
                          "title": {
                            "type": "string"
                          },
                          "description": {
                            "type": "string"
                          },
                          "callToAction": {
                            "type": "string"
                          },
                          "picture": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Erreur de validation des param√®tres"
          },
          "500": {
            "description": "Erreur interne du serveur"
          }
        }
      }
        },
        "/categories/{id}": {
      "get": {
        "tags": ["Groww-api-next"],
        "summary": "R√©cup√©rer une cat√©gorie par son ID",
        "description": "Cette route permet de r√©cup√©rer les d√©tails d'une cat√©gorie sp√©cifique via son identifiant unique.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "12345"
            },
            "description": "ID de la cat√©gorie √† r√©cup√©rer."
          }
        ],
        "responses": {
          "200": {
            "description": "Cat√©gorie r√©cup√©r√©e avec succ√®s",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string"
                    },
                    "label": {
                      "type": "string"
                    },
                    "title": {
                      "type": "string"
                    },
                    "description": {
                      "type": "string"
                    },
                    "callToAction": {
                      "type": "string"
                    },
                    "picture": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Cat√©gorie non trouv√©e"
          },
          "500": {
            "description": "Erreur interne du serveur"
          }
        }
      }
        },
    "/cities": {
      "get": {
        "tags": ["Groww-api-next"],
        "summary": "R√©cup√©rer la liste des villes",
        "description": "Cette route permet de r√©cup√©rer une liste de villes selon les param√®tres de pagination et de filtrage.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 1
            },
            "description": "Le num√©ro de la page √† r√©cup√©rer."
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 10
            },
            "description": "Le nombre de villes par page."
          },
          {
            "name": "name",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "example": "Paris"
            },
            "description": "Filtrer par nom de la ville."
          },
          {
            "name": "country",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "example": "France"
            },
            "description": "Filtrer par pays."
          }
        ],
        "responses": {
          "200": {
            "description": "Liste des villes r√©cup√©r√©e avec succ√®s",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "metadata": {
                      "type": "object",
                      "properties": {
                        "pagination": {
                          "type": "object",
                          "properties": {
                            "page": {
                              "type": "integer"
                            },
                            "pageSize": {
                              "type": "integer"
                            },
                            "pageCount": {
                              "type": "integer"
                            },
                            "total": {
                              "type": "integer"
                            }
                          }
                        }
                      }
                    },
                    "results": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string"
                          },
                          "name": {
                            "type": "string"
                          },
                          "simpleName": {
                            "type": "string"
                          },
                          "realName": {
                            "type": "string"
                          },
                          "country": {
                            "type": "string"
                          },
                          "department": {
                            "type": "string"
                          },
                          "postalCode": {
                            "type": "string"
                          },
                          "position": {
                            "type": "object",
                            "properties": {
                              "coordinates": {
                                "type": "array",
                                "items": {
                                  "type": "number"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Erreur de validation des param√®tres"
          },
          "500": {
            "description": "Erreur interne du serveur"
          }
        }
      }
    },
    "/cities/{id}": {
      "get": {
        "tags": ["Groww-api-next"],
        "summary": "R√©cup√©rer une ville par son ID",
        "description": "Cette route permet de r√©cup√©rer les d√©tails d'une ville sp√©cifique via son identifiant unique.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "abc123"
            },
            "description": "ID de la ville √† r√©cup√©rer."
          }
        ],
        "responses": {
          "200": {
            "description": "Ville r√©cup√©r√©e avec succ√®s",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string"
                    },
                    "name": {
                      "type": "string"
                    },
                    "simpleName": {
                      "type": "string"
                    },
                    "realName": {
                      "type": "string"
                    },
                    "country": {
                      "type": "string"
                    },
                    "department": {
                      "type": "string"
                    },
                    "postalCode": {
                      "type": "string"
                    },
                    "position": {
                      "type": "object",
                      "properties": {
                        "coordinates": {
                          "type": "array",
                          "items": {
                            "type": "number"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Ville non trouv√©e"
          },
          "500": {
            "description": "Erreur interne du serveur"
          }
        }
      }
    },
    "/countries": {
      "get": {
        "tags": ["Groww-api-next"],
        "summary": "R√©cup√©rer la liste des pays",
        "description": "Cette route permet de r√©cup√©rer une liste de pays selon les param√®tres de pagination et de filtrage.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 1
            },
            "description": "Le num√©ro de la page √† r√©cup√©rer."
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 10
            },
            "description": "Le nombre de pays par page."
          },
          {
            "name": "name",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "example": "France"
            },
            "description": "Filtrer par nom du pays."
          }
        ],
        "responses": {
          "200": {
            "description": "Liste des pays r√©cup√©r√©e avec succ√®s",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "metadata": {
                      "type": "object",
                      "properties": {
                        "pagination": {
                          "type": "object",
                          "properties": {
                            "page": {
                              "type": "integer"
                            },
                            "pageSize": {
                              "type": "integer"
                            },
                            "pageCount": {
                              "type": "integer"
                            },
                            "total": {
                              "type": "integer"
                            }
                          }
                        }
                      }
                    },
                    "results": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string"
                          },
                          "name": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Erreur de validation des param√®tres"
          },
          "500": {
            "description": "Erreur interne du serveur"
          }
        }
      }
    },
    "/identify": {
      "post": {
        "tags": ["Groww-api-next"],
        "summary": "Identification de la plante",
        "description": "Cette route permet d'identifier une plante en envoyant des images de ses organes et de comparer les r√©sultats √† ceux de la base de donn√©es Groww.",
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "organs": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "example": "leaf"
                    },
                    "description": "Les organes de la plante (ex: feuille, fleur, etc.)."
                  },
                  "files": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "binary"
                    },
                    "description": "Les images des organes de la plante."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Identification r√©ussie, retour des plantes similaires",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "vernacularName": {
                        "type": "string"
                      },
                      "scientificName": {
                        "type": "string"
                      },
                      "idGroww": {
                        "type": "string",
                        "nullable": true
                      },
                      "slug": {
                        "type": "string",
                        "nullable": true
                      },
                      "score": {
                        "type": "number",
                        "format": "float"
                      },
                      "images": {
                        "type": "array",
                        "items": {
                          "type": "string",
                          "format": "uri"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Erreur de validation des param√®tres ou des images"
          },
          "500": {
            "description": "Erreur interne du serveur"
          }
        }
      }
    },
    "/oauth/token": {
      "post": {
        "tags": ["Groww-api-next"],
        "summary": "G√©n√©ration d'un token OAuth",
        "description": "Cette route permet de g√©n√©rer un token d'acc√®s ou un token de rafra√Æchissement selon le type de grant.",
        "parameters": [
          {
            "name": "grant_type",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "enum": ["password", "refresh_token", "google_token", "apple_token"],
              "description": "Le type de grant utilis√© pour la g√©n√©ration du token."
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "example": "user@example.com"
                  },
                  "password": {
                    "type": "string",
                    "example": "password123"
                  },
                  "id_token": {
                    "type": "string",
                    "example": "example-google-id-token"
                  }
                },
                "required": ["email", "password"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Token g√©n√©r√© avec succ√®s",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "access_token": {
                      "type": "string",
                      "example": "example-access-token"
                    },
                    "refresh_token": {
                      "type": "string",
                      "example": "example-refresh-token"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Erreur de validation des param√®tres d'entr√©e"
          },
          "401": {
            "description": "Non autoris√©, invalidation des identifiants"
          },
          "500": {
            "description": "Erreur interne du serveur"
          }
        }
      }
    },
    "/plants": {
      "get": {
        "tags": ["Groww-api-next"],
        "summary": "Obtenir une liste de plantes",
        "description": "Cette route permet de r√©cup√©rer une liste de plantes en fonction de param√®tres de recherche tels que `search`, `categoryId`, `actionId`, etc.",
        "parameters": [
          {
            "name": "search",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "example": "rose"
            },
            "description": "Filtrer les plantes par nom vernaculaire ou latin."
          },
          {
            "name": "categoryId",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "example": "123"
            },
            "description": "Filtrer les plantes par ID de cat√©gorie."
          },
          {
            "name": "actionId",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "example": "456"
            },
            "description": "Filtrer les plantes par ID d'action."
          },
          {
            "name": "page",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 1
            },
            "description": "Num√©ro de la page √† retourner."
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 10
            },
            "description": "Nombre de plantes par page."
          }
        ],
        "responses": {
          "200": {
            "description": "Liste des plantes r√©cup√©r√©e avec succ√®s",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "metadata": {
                      "type": "object",
                      "properties": {
                        "pagination": {
                          "type": "object",
                          "properties": {
                            "page": {
                              "type": "integer",
                              "example": 1
                            },
                            "pageSize": {
                              "type": "integer",
                              "example": 10
                            },
                            "pageCount": {
                              "type": "integer",
                              "example": 3
                            },
                            "total": {
                              "type": "integer",
                              "example": 30
                            }
                          }
                        }
                      }
                    },
                    "results": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "example": "12345"
                          },
                          "vernacularName": {
                            "type": "string",
                            "example": "Rose"
                          },
                          "latinName": {
                            "type": "string",
                            "example": "Rosa"
                          },
                          "smallDescription": {
                            "type": "string",
                            "example": "Une plante √† fleurs"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Erreur de validation des param√®tres d'entr√©e"
          },
          "500": {
            "description": "Erreur interne du serveur"
          }
        }
      }
    },
    "/plants/{id}": {
      "get": {
        "tags": ["Groww-api-next"],
        "summary": "Obtenir une plante sp√©cifique",
        "description": "Cette route permet de r√©cup√©rer une plante en fonction de son identifiant ou de son slug.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "12345"
            },
            "description": "ID ou slug de la plante"
          },
          {
            "name": "parameterType",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "example": "slug"
            },
            "description": "Type de param√®tre utilis√©, `id` ou `slug`."
          }
        ],
        "responses": {
          "200": {
            "description": "Plante r√©cup√©r√©e avec succ√®s",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "12345"
                    },
                    "vernacularName": {
                      "type": "string",
                      "example": "Rose"
                    },
                    "latinName": {
                      "type": "string",
                      "example": "Rosa"
                    },
                    "description": {
                      "type": "string",
                      "example": "Une plante √† fleurs."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Plante non trouv√©e"
          },
          "500": {
            "description": "Erreur interne du serveur"
          }
        }
      }
    },
    "/timeline": {
      "get": {
        "tags": ["Groww-api-next"],
        "summary": "Obtenir la timeline de l'utilisateur",
        "description": "R√©cup√®re la timeline d'un utilisateur en fonction de diff√©rents filtres comme plantId, le statut de propri√©t√© et l'historique.",
        "parameters": [
          {
            "name": "owned",
            "in": "query",
            "description": "Filtrer les plantes par statut de propri√©t√© (true/false)",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "plantId",
            "in": "query",
            "description": "Filtrer par ID de plante sp√©cifique",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "history",
            "in": "query",
            "description": "Inclure les donn√©es historiques",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "locale",
            "in": "query",
            "description": "La langue de la r√©ponse",
            "required": false,
            "schema": {
              "type": "string",
              "example": "fr"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Donn√©es de la timeline pour l'utilisateur",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "date": {
                        "type": "string",
                        "example": "2025-03-12"
                      },
                      "label": {
                        "type": "string",
                        "example": "Mars 2025"
                      },
                      "actions": {
                        "type": "object",
                        "additionalProperties": {
                          "type": "object",
                          "properties": {
                            "metadata": {
                              "type": "object",
                              "properties": {
                                "total": {
                                  "type": "integer",
                                  "example": 5
                                },
                                "actionId": {
                                  "type": "string",
                                  "example": "5f1c3b0e8e3b0bdf63ac05ef"
                                },
                                "actionLabel": {
                                  "type": "string",
                                  "example": "Arrosage"
                                },
                                "actionPast": {
                                  "type": "string",
                                  "example": "Arros√©"
                                }
                              }
                            },
                            "data": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "userPlant": {
                                    "type": "object",
                                    "properties": {
                                      "id": {
                                        "type": "string",
                                        "example": "plant-id"
                                      },
                                      "name": {
                                        "type": "string",
                                        "example": "Tomate"
                                      },
                                      "myPlantName": {
                                        "type": "string",
                                        "example": "Ma Tomate"
                                      },
                                      "plant": {
                                        "type": "object",
                                        "properties": {
                                          "id": {
                                            "type": "string",
                                            "example": "plant-id"
                                          }
                                        }
                                      },
                                      "coverPhoto": {
                                        "type": "string",
                                        "example": "https://example.com/photo.jpg"
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Mauvaise requ√™te, probablement en raison de param√®tres invalides",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Param√®tres de requ√™te invalides"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Erreur interne du serveur",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Une erreur inattendue est survenue"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users": {
  "post": {
    "tags": ["Groww-api-next"],
    "summary": "Cr√©er un nouvel utilisateur",
    "description": "Cr√©e un nouvel utilisateur dans le syst√®me",
    "parameters": [
      {
        "name": "body",
        "in": "body",
        "required": true,
        "schema": {
          "$ref": "#/definitions/CreateUserRequest"
        }
      }
    ],
    "responses": {
      "200": {
        "description": "Utilisateur cr√©√© avec succ√®s",
        "schema": {
          "$ref": "#/definitions/UserResponse"
        }
      },
      "400": {
        "description": "Corps de la requ√™te invalide"
      }
    }
  }
},
"/users/me": {
  "get": {
    "tags": ["Groww-api-next"],
    "summary": "Obtenir les informations de l'utilisateur actuel",
    "description": "R√©cup√®re les d√©tails de l'utilisateur actuellement authentifi√©",
    "responses": {
      "200": {
        "description": "D√©tails de l'utilisateur r√©cup√©r√©s avec succ√®s",
        "schema": {
          "$ref": "#/definitions/UserResponse"
        }
      },
      "401": {
        "description": "Non autoris√©"
      }
    }
  },
  "put": {
    "tags": ["Groww-api-next"],
    "summary": "Mettre √† jour les informations de l'utilisateur actuel",
    "description": "Met √† jour les d√©tails de l'utilisateur actuellement authentifi√©",
    "parameters": [
      {
        "name": "body",
        "in": "body",
        "required": true,
        "schema": {
          "$ref": "#/definitions/UpdateUserRequest"
        }
      }
    ],
    "responses": {
      "200": {
        "description": "Utilisateur mis √† jour avec succ√®s",
        "schema": {
          "$ref": "#/definitions/UserResponse"
        }
      },
      "400": {
        "description": "Corps de la requ√™te invalide"
      },
      "401": {
        "description": "Non autoris√©"
      }
    }
  },
  "delete": {
    "tags": ["Groww-api-next"],
    "summary": "Supprimer l'utilisateur actuel",
    "description": "Supprime le compte de l'utilisateur actuellement authentifi√©",
    "responses": {
      "204": {
        "description": "Utilisateur supprim√© avec succ√®s"
      },
      "401": {
        "description": "Non autoris√©"
      }
    }
  }
},
"/users/check-email": {
  "post": {
    "tags": ["Groww-api-next"],
    "summary": "V√©rifier si un email existe d√©j√†",
    "description": "Valide si l'email fourni est d√©j√† utilis√©",
    "parameters": [
      {
        "name": "body",
        "in": "body",
        "required": true,
        "schema": {
          "$ref": "#/definitions/CheckEmailRequest"
        }
      }
    ],
    "responses": {
      "202": {
        "description": "V√©rification de l'email r√©ussie"
      },
      "400": {
        "description": "Corps de la requ√™te invalide"
      },
      "409": {
        "description": "L'email existe d√©j√†"
      }
    }
  }
},
"/users/reset-password/request": {
  "post": {
    "tags": ["Groww-api-next"],
    "summary": "Demander la r√©initialisation du mot de passe",
    "description": "G√©n√®re un lien de r√©initialisation du mot de passe et l'envoie √† l'email de l'utilisateur",
    "parameters": [
      {
        "name": "body",
        "in": "body",
        "required": true,
        "schema": {
          "$ref": "#/definitions/ResetPasswordRequest"
        }
      }
    ],
    "responses": {
      "201": {
        "description": "Demande de r√©initialisation du mot de passe envoy√©e"
      },
      "400": {
        "description": "Corps de la requ√™te invalide"
      },
      "404": {
        "description": "Email introuvable"
      }
    }
  }
},
"/users/reset-password": {
  "post": {
    "tags": ["Groww-api-next"],
    "summary": "R√©initialiser le mot de passe",
    "description": "R√©initialise le mot de passe de l'utilisateur en utilisant le token fourni et le nouveau mot de passe",
    "parameters": [
      {
        "name": "body",
        "in": "body",
        "required": true,
        "schema": {
          "$ref": "#/definitions/ResetPassword"
        }
      }
    ],
    "responses": {
      "200": {
        "description": "R√©initialisation du mot de passe r√©ussie",
        "schema": {
          "$ref": "#/definitions/PasswordResetResponse"
        }
      },
      "400": {
        "description": "Corps de la requ√™te invalide"
      },
      "401": {
        "description": "Token invalide ou expir√©"
      }
    }
  }
},
"/me/actions": {
      "get": {
        "tags": ["Groww-api-next"],
        "summary": "R√©cup√®re les actions de l'utilisateur connect√©.",
        "operationId": "getActions",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page de r√©sultats √† retourner.",
            "required": false,
            "schema": {
              "type": "integer",
              "example": 1
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Nombre d'√©l√©ments par page.",
            "required": false,
            "schema": {
              "type": "integer",
              "example": 10
            }
          },
          {
            "name": "plantId",
            "in": "query",
            "description": "Filtrer les actions par ID de plante.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "plant123"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Liste des actions de l'utilisateur.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "metadata": {
                      "type": "object",
                      "properties": {
                        "pagination": {
                          "type": "object",
                          "properties": {
                            "page": {
                              "type": "integer",
                              "example": 1
                            },
                            "pageSize": {
                              "type": "integer",
                              "example": 10
                            },
                            "pageCount": {
                              "type": "integer",
                              "example": 1
                            },
                            "total": {
                              "type": "integer",
                              "example": 10
                            }
                          }
                        }
                      }
                    },
                    "results": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "example": "actionId123"
                          },
                          "userId": {
                            "type": "string",
                            "example": "userId123"
                          },
                          "plantId": {
                            "type": "string",
                            "example": "plant123"
                          },
                          "action": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "string",
                                "example": "actionId"
                              },
                              "name": {
                                "type": "string",
                                "example": "Arrosage"
                              }
                            }
                          },
                          "date": {
                            "type": "string",
                            "format": "date-time",
                            "example": "2025-03-13T10:00:00Z"
                          },
                          "skipped": {
                            "type": "boolean",
                            "example": false
                          },
                          "doNotFollowTasks": {
                            "type": "boolean",
                            "example": false
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Requ√™te invalide, param√®tres manquants ou erron√©s.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Le param√®tre 'page' est manquant ou incorrect."
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Groww-api-next"],
        "summary": "Cr√©e une nouvelle action pour l'utilisateur.",
        "operationId": "createAction",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "plantId": {
                    "type": "string",
                    "example": "plant123"
                  },
                  "actionId": {
                    "type": "string",
                    "example": "actionId123"
                  },
                  "date": {
                    "type": "string",
                    "format": "date-time",
                    "example": "2025-03-13T10:00:00Z"
                  },
                  "skipped": {
                    "type": "boolean",
                    "example": false
                  },
                  "doNotFollowTasks": {
                    "type": "boolean",
                    "example": false
                  }
                },
                "required": ["plantId", "actionId", "date"]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Action cr√©√©e avec succ√®s.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "newActionId"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Requ√™te invalide, param√®tres erron√©s.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Le param√®tre 'actionId' est manquant."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/me/actions/{id}": {
      "get": {
        "tags": ["Groww-api-next"],
        "summary": "R√©cup√®re une action sp√©cifique de l'utilisateur.",
        "operationId": "getActionById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "ID de l'action.",
            "schema": {
              "type": "string",
              "example": "actionId123"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Action r√©cup√©r√©e avec succ√®s.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "actionId123"
                    },
                    "userId": {
                      "type": "string",
                      "example": "userId123"
                    },
                    "plantId": {
                      "type": "string",
                      "example": "plant123"
                    },
                    "action": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "example": "actionId"
                        },
                        "name": {
                          "type": "string",
                          "example": "Arrosage"
                        }
                      }
                    },
                    "date": {
                      "type": "string",
                      "format": "date-time",
                      "example": "2025-03-13T10:00:00Z"
                    },
                    "skipped": {
                      "type": "boolean",
                      "example": false
                    },
                    "doNotFollowTasks": {
                      "type": "boolean",
                      "example": false
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Action non trouv√©e.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Action non trouv√©e."
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Groww-api-next"],
        "summary": "Supprime une action sp√©cifique de l'utilisateur.",
        "operationId": "deleteAction",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "ID de l'action √† supprimer.",
            "schema": {
              "type": "string",
              "example": "actionId123"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Action supprim√©e avec succ√®s."
          },
          "404": {
            "description": "Action non trouv√©e.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Action non trouv√©e."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/me/categories": {
      "get": {
        "tags": ["Groww-api-next"],
        "summary": "R√©cup√®re les cat√©gories des plantes de l'utilisateur.",
        "operationId": "getCategories",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page de r√©sultats √† retourner.",
            "required": false,
            "schema": {
              "type": "integer",
              "example": 1
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Nombre d'√©l√©ments par page.",
            "required": false,
            "schema": {
              "type": "integer",
              "example": 10
            }
          },
          {
            "name": "owned",
            "in": "query",
            "description": "Filtrer les cat√©gories selon les plantes poss√©d√©es par l'utilisateur.",
            "required": false,
            "schema": {
              "type": "boolean",
              "example": true
            }
          },
          {
            "name": "locale",
            "in": "query",
            "description": "Langue de la r√©ponse.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "fr"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Liste des cat√©gories r√©cup√©r√©es.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "metadata": {
                      "type": "object",
                      "properties": {
                        "pagination": {
                          "type": "object",
                          "properties": {
                            "page": {
                              "type": "integer",
                              "example": 1
                            },
                            "pageSize": {
                              "type": "integer",
                              "example": 10
                            },
                            "pageCount": {
                              "type": "integer",
                              "example": 1
                            },
                            "total": {
                              "type": "integer",
                              "example": 10
                            }
                          }
                        }
                      }
                    },
                    "results": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "example": "categoryId123"
                          },
                          "label": {
                            "type": "string",
                            "example": "Plantes d'int√©rieur"
                          },
                          "title": {
                            "type": "string",
                            "example": "Plantes d'int√©rieur"
                          },
                          "description": {
                            "type": "string",
                            "example": "Cat√©gorie pour les plantes d'int√©rieur."
                          },
                          "picture": {
                            "type": "string",
                            "example": "https://example.com/picture.jpg"
                          },
                          "callToAction": {
                            "type": "string",
                            "example": "D√©couvrez les meilleures plantes d'int√©rieur."
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Requ√™te invalide, param√®tres manquants ou erron√©s.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Le param√®tre 'page' est manquant ou incorrect."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/me/notifications/_test": {
      "post": {
        "tags": ["Groww-api-next"],
        "summary": "Test d'envoi de notification pour un utilisateur.",
        "operationId": "testNotification",
        "responses": {
          "204": {
            "description": "Notification de test envoy√©e avec succ√®s."
          },
          "400": {
            "description": "Token de notification manquant ou invalide.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Missing notification token"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "L'utilisateur n'a pas de plantes.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "This user does not have plants"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Erreur lors de l'envoi de la notification.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Could not send the notification"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/me/plants": {
      "get": {
        "tags": ["Groww-api-next"],
        "summary": "R√©cup√®re la liste des plantes de l'utilisateur",
        "operationId": "getPlants",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Num√©ro de la page de r√©sultats",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 1
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Nombre de plantes par page",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 10
            }
          },
          {
            "name": "owned",
            "in": "query",
            "description": "Filtrer par plantes poss√©d√©es",
            "schema": {
              "type": "boolean",
              "example": true
            }
          },
          {
            "name": "categoryId",
            "in": "query",
            "description": "Filtrer par cat√©gorie de plante",
            "schema": {
              "type": "string",
              "example": "60d3b41abdacab002f7c7b1f"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Liste des plantes de l'utilisateur",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "metadata": {
                      "type": "object",
                      "properties": {
                        "pagination": {
                          "type": "object",
                          "properties": {
                            "page": {
                              "type": "integer"
                            },
                            "pageSize": {
                              "type": "integer"
                            },
                            "pageCount": {
                              "type": "integer"
                            },
                            "total": {
                              "type": "integer"
                            }
                          }
                        }
                      }
                    },
                    "results": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "example": "60d5d9f44f0a2a001f8b4567"
                          },
                          "name": {
                            "type": "string",
                            "example": "Rose"
                          },
                          "latinName": {
                            "type": "string",
                            "example": "Rosa"
                          },
                          "slug": {
                            "type": "string",
                            "example": "rose"
                          },
                          "category": {
                            "type": "string",
                            "example": "Flower"
                          },
                          "photos": {
                            "type": "object",
                            "properties": {
                              "cover": {
                                "type": "string",
                                "example": "https://example.com/photo/cover.jpg"
                              },
                              "user": {
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "id": {
                                      "type": "string",
                                      "example": "60d5d9f44f0a2a001f8b4568"
                                    },
                                    "url": {
                                      "type": "string",
                                      "example": "https://example.com/photo/user.jpg"
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Param√®tres de la requ√™te invalides"
          }
        }
      },
      "post": {
        "tags": ["Groww-api-next"],
        "summary": "Cr√©e une nouvelle plante pour l'utilisateur",
        "operationId": "createPlant",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "plantId": {
                    "type": "string",
                    "example": "60d3b41abdacab002f7c7b1f"
                  },
                  "vernacularName": {
                    "type": "string",
                    "example": "Rose"
                  },
                  "myPlantName": {
                    "type": "string",
                    "example": "Ma jolie rose"
                  },
                  "latinName": {
                    "type": "string",
                    "example": "Rosa"
                  },
                  "category": {
                    "type": "string",
                    "example": "Flower"
                  },
                  "photos": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "example": "https://example.com/photo.jpg"
                    }
                  }
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "Plante cr√©√©e avec succ√®s",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "example": "60d5d9f44f0a2a001f8b4567"
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Param√®tres de la requ√™te invalides"
            }
          }
        }
      }
    },
    "/me/plants/{id}": {
      "get": {
        "tags": ["Groww-api-next"],
        "summary": "R√©cup√®re une plante sp√©cifique de l'utilisateur",
        "operationId": "getPlant",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "ID de la plante",
            "schema": {
              "type": "string",
              "example": "60d5d9f44f0a2a001f8b4567"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Plante r√©cup√©r√©e avec succ√®s",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "60d5d9f44f0a2a001f8b4567"
                    },
                    "name": {
                      "type": "string",
                      "example": "Rose"
                    },
                    "latinName": {
                      "type": "string",
                      "example": "Rosa"
                    },
                    "slug": {
                      "type": "string",
                      "example": "rose"
                    },
                    "category": {
                      "type": "string",
                      "example": "Flower"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Plante non trouv√©e"
          }
        }
      },
      "put": {
        "tags": ["Groww-api-next"],
        "summary": "Met √† jour les informations d'une plante de l'utilisateur",
        "operationId": "updatePlant",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "ID de la plante",
            "schema": {
              "type": "string",
              "example": "60d5d9f44f0a2a001f8b4567"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "myPlantName": {
                    "type": "string",
                    "example": "Ma nouvelle rose"
                  }
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Plante mise √† jour avec succ√®s",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "example": "60d5d9f44f0a2a001f8b4567"
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Param√®tres invalides"
            }
          }
        }
      },
      "delete": {
        "tags": ["Groww-api-next"],
        "summary": "Supprime une plante de l'utilisateur",
        "operationId": "deletePlant",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "ID de la plante",
            "schema": {
              "type": "string",
              "example": "60d5d9f44f0a2a001f8b4567"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Plante supprim√©e avec succ√®s"
          },
          "404": {
            "description": "Plante non trouv√©e"
          }
        }
      }
    },
    "/me/plants/{plantId}/photos": {
      "post": {
        "tags": ["Groww-api-next"],
        "summary": "Ajoute une photo √† une plante",
        "operationId": "createPlantPhoto",
        "parameters": [
          {
            "name": "plantId",
            "in": "path",
            "required": true,
            "description": "ID de la plante",
            "schema": {
              "type": "string",
              "example": "60d5d9f44f0a2a001f8b4567"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Photo ajout√©e avec succ√®s",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "60d5d9f44f0a2a001f8b4568"
                    },
                    "url": {
                      "type": "string",
                      "example": "https://example.com/photo.jpg"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Erreur lors de l'ajout de la photo"
          }
        }
      }
    }

    },
    "definitions": {
      "Action": {
      "type": "object",
      "properties": {
        "type": { "type": "string" },
        "group": { "type": "string" },
        "diary": { "type": "string" },
        "order": { "type": "integer" },
        "background_color": { "type": "string" },
        "at_start": { "type": "boolean" },
        "at_end": { "type": "boolean" },
        "user_interaction": { "type": "boolean" },
        "notify": { "type": "boolean" },
        "visible": { "type": "boolean" },
        "conditions": {
          "type": "array",
          "items": { "type": "integer" }
        }
      }
    },
    "CreateUserRequest": {
      "type": "object",
      "properties": {
        "email": { "type": "string" },
        "password": { "type": "string" },
        "firstname": { "type": "string" },
        "lastname": { "type": "string" },
        "cityId": { "type": "string" }
      },
      "required": ["email", "password", "firstname", "lastname"]
    },
    "UpdateUserRequest": {
      "type": "object",
      "properties": {
        "firstname": { "type": "string" },
        "lastname": { "type": "string" },
        "cityId": { "type": "string" },
        "language": { "type": "string" }
      }
    },
    "CheckEmailRequest": {
      "type": "object",
      "properties": {
        "email": { "type": "string" }
      },
      "required": ["email"]
    },
    "ResetPasswordRequest": {
      "type": "object",
      "properties": {
        "email": { "type": "string" }
      },
      "required": ["email"]
    },
    "ResetPassword": {
      "type": "object",
      "properties": {
        "token": { "type": "string" },
        "password": { "type": "string" }
      },
      "required": ["token", "password"]
    },
    "UserResponse": {
      "type": "object",
      "properties": {
        "id": { "type": "string" },
        "email": { "type": "string" },
        "firstname": { "type": "string" },
        "lastname": { "type": "string" },
        "cityId": { "type": "string" },
        "city": { "type": "string" },
        "country": { "type": "string" },
        "language": { "type": "string" },
        "notifications": {
          "type": "object",
          "properties": {
            "accepted": { "type": "boolean" },
            "token": { "type": "string" }
          }
        }
      }
    },
    "PasswordResetResponse": {
      "type": "object",
      "properties": {
        "access_token": { "type": "string" },
        "refresh_token": { "type": "string" }
      }
    }
    },
    "security": [
    {
      "bearerAuth": []
    }
  ],
    "components": {
      "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    },
      "schemas": {
        "Action": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string"
            },
            "label": {
              "type": "string"
            },
            "title": {
              "type": "string"
            },
            "adjectival": {
              "type": "string"
            },
            "callToAction": {
              "type": "string"
            },
            "notify": {
              "type": "boolean"
            },
            "diary": {
              "type": "string"
            },
            "conditions": {
              "type": "string"
            }
          }
        },
        "Category": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "label": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "callToAction": {
            "type": "string"
          },
          "picture": {
            "type": "string"
          }
        }
        },
        "City": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "simpleName": {
            "type": "string"
          },
          "realName": {
            "type": "string"
          },
          "country": {
            "type": "string"
          },
          "department": {
            "type": "string"
          },
          "postalCode": {
            "type": "string"
          },
          "position": {
            "type": "object",
            "properties": {
              "coordinates": {
                "type": "array",
                "items": {
                  "type": "number"
                }
              }
            }
          }
        }
        },
        "Country": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        }
        },
        "IdentificationResult": {
        "type": "object",
        "properties": {
          "vernacularName": {
            "type": "string"
          },
          "scientificName": {
            "type": "string"
          },
          "idGroww": {
            "type": "string",
            "nullable": true
          },
          "slug": {
            "type": "string",
            "nullable": true
          },
          "score": {
            "type": "number",
            "format": "float"
          },
          "images": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uri"
            }
          }
        }
        },
        "OAuthTokenResponse": {
        "type": "object",
        "properties": {
          "access_token": {
            "type": "string"
          },
          "refresh_token": {
            "type": "string"
          }
        }
        },
        "Plant": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "12345"
          },
          "vernacularName": {
            "type": "string",
            "example": "Rose"
          },
          "latinName": {
            "type": "string",
            "example": "Rosa"
          },
          "smallDescription": {
            "type": "string",
            "example": "Une plante √† fleurs"
          }
        }
        },
        "Timeline": {
        "type": "object",
        "properties": {
          "date": {
            "type": "string"
          },
          "label": {
            "type": "string"
          },
          "actions": {
            "type": "object"
          }
        }
        }
      }
    }
  }
  